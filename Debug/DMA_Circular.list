
DMA_Circular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001ac8  08001ac8  00011ac8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001b04  08001b04  00011b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001b08  08001b08  00011b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08001b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003c4  20000010  08001b1c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200003d4  08001b1c  000203d4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000763d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000018ca  00000000  00000000  00027676  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029e2  00000000  00000000  00028f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005c0  00000000  00000000  0002b928  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000860  00000000  00000000  0002bee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003462  00000000  00000000  0002c748  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001f6c  00000000  00000000  0002fbaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00031b16  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000ea0  00000000  00000000  00031b94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ab0 	.word	0x08001ab0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001ab0 	.word	0x08001ab0

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f8a0 	bl	80002a8 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	2000000c 	.word	0x2000000c
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 faaa 	bl	8001704 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000030 	.word	0x20000030
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000030 	.word	0x20000030

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfa9      	itett	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	b2d2      	uxtbge	r2, r2
 8000270:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfbb      	ittet	lt
 8000276:	f000 000f 	andlt.w	r0, r0, #15
 800027a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	541a      	strblt	r2, [r3, r0]
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800028c:	2800      	cmp	r0, #0
 800028e:	db08      	blt.n	80002a2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000290:	2301      	movs	r3, #1
 8000292:	0942      	lsrs	r2, r0, #5
 8000294:	f000 001f 	and.w	r0, r0, #31
 8000298:	fa03 f000 	lsl.w	r0, r3, r0
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <HAL_NVIC_EnableIRQ+0x18>)
 800029e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002a2:	4770      	bx	lr
 80002a4:	e000e100 	.word	0xe000e100

080002a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a8:	3801      	subs	r0, #1
 80002aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ae:	d20a      	bcs.n	80002c6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	e000e010 	.word	0xe000e010
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80002d4:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80002d6:	b330      	cbz	r0, 8000326 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80002d8:	2214      	movs	r2, #20
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	4b13      	ldr	r3, [pc, #76]	; (800032c <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80002de:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80002e0:	440b      	add	r3, r1
 80002e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80002ea:	4b11      	ldr	r3, [pc, #68]	; (8000330 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80002ec:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80002ee:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80002f0:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80002f2:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 80002f6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80002f8:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80002fa:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80002fe:	4323      	orrs	r3, r4
 8000300:	6904      	ldr	r4, [r0, #16]
 8000302:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000304:	6944      	ldr	r4, [r0, #20]
 8000306:	4323      	orrs	r3, r4
 8000308:	6984      	ldr	r4, [r0, #24]
 800030a:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800030c:	69c4      	ldr	r4, [r0, #28]
 800030e:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000310:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000312:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000314:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000316:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000318:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800031c:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800031e:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000322:	4618      	mov	r0, r3
 8000324:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000326:	2001      	movs	r0, #1
}
 8000328:	bd10      	pop	{r4, pc}
 800032a:	bf00      	nop
 800032c:	bffdfff8 	.word	0xbffdfff8
 8000330:	40020000 	.word	0x40020000

08000334 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000334:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000336:	f890 4020 	ldrb.w	r4, [r0, #32]
 800033a:	2c01      	cmp	r4, #1
 800033c:	d035      	beq.n	80003aa <HAL_DMA_Start_IT+0x76>
 800033e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000340:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000344:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000348:	42a5      	cmp	r5, r4
 800034a:	f04f 0600 	mov.w	r6, #0
 800034e:	f04f 0402 	mov.w	r4, #2
 8000352:	d128      	bne.n	80003a6 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000354:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000358:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800035a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800035c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800035e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000360:	f026 0601 	bic.w	r6, r6, #1
 8000364:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000366:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000368:	40bd      	lsls	r5, r7
 800036a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800036c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800036e:	6843      	ldr	r3, [r0, #4]
 8000370:	6805      	ldr	r5, [r0, #0]
 8000372:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000374:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000376:	bf0b      	itete	eq
 8000378:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800037a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800037c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800037e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000380:	b14b      	cbz	r3, 8000396 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000382:	6823      	ldr	r3, [r4, #0]
 8000384:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000388:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800038a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800038c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	602b      	str	r3, [r5, #0]
 8000394:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000396:	6823      	ldr	r3, [r4, #0]
 8000398:	f023 0304 	bic.w	r3, r3, #4
 800039c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800039e:	6823      	ldr	r3, [r4, #0]
 80003a0:	f043 030a 	orr.w	r3, r3, #10
 80003a4:	e7f0      	b.n	8000388 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80003a6:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80003aa:	2002      	movs	r0, #2
}
 80003ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080003b0 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80003b0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80003b4:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80003b6:	2b02      	cmp	r3, #2
 80003b8:	d003      	beq.n	80003c2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80003ba:	2304      	movs	r3, #4
 80003bc:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80003be:	2001      	movs	r0, #1
 80003c0:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80003c2:	6803      	ldr	r3, [r0, #0]
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	f022 020e 	bic.w	r2, r2, #14
 80003ca:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	f022 0201 	bic.w	r2, r2, #1
 80003d2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80003d4:	4a18      	ldr	r2, [pc, #96]	; (8000438 <HAL_DMA_Abort_IT+0x88>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d01f      	beq.n	800041a <HAL_DMA_Abort_IT+0x6a>
 80003da:	3214      	adds	r2, #20
 80003dc:	4293      	cmp	r3, r2
 80003de:	d01e      	beq.n	800041e <HAL_DMA_Abort_IT+0x6e>
 80003e0:	3214      	adds	r2, #20
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d01d      	beq.n	8000422 <HAL_DMA_Abort_IT+0x72>
 80003e6:	3214      	adds	r2, #20
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d01d      	beq.n	8000428 <HAL_DMA_Abort_IT+0x78>
 80003ec:	3214      	adds	r2, #20
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d01d      	beq.n	800042e <HAL_DMA_Abort_IT+0x7e>
 80003f2:	3214      	adds	r2, #20
 80003f4:	4293      	cmp	r3, r2
 80003f6:	bf0c      	ite	eq
 80003f8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80003fc:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000400:	4a0e      	ldr	r2, [pc, #56]	; (800043c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8000402:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000404:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000406:	2301      	movs	r3, #1
 8000408:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 800040c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800040e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000412:	b17b      	cbz	r3, 8000434 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8000414:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000416:	4620      	mov	r0, r4
 8000418:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800041a:	2301      	movs	r3, #1
 800041c:	e7f0      	b.n	8000400 <HAL_DMA_Abort_IT+0x50>
 800041e:	2310      	movs	r3, #16
 8000420:	e7ee      	b.n	8000400 <HAL_DMA_Abort_IT+0x50>
 8000422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000426:	e7eb      	b.n	8000400 <HAL_DMA_Abort_IT+0x50>
 8000428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800042c:	e7e8      	b.n	8000400 <HAL_DMA_Abort_IT+0x50>
 800042e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000432:	e7e5      	b.n	8000400 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000434:	4618      	mov	r0, r3
}
 8000436:	bd10      	pop	{r4, pc}
 8000438:	40020008 	.word	0x40020008
 800043c:	40020000 	.word	0x40020000

08000440 <HAL_DMA_IRQHandler>:
{
 8000440:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000442:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000444:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000446:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000448:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800044a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800044c:	4095      	lsls	r5, r2
 800044e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000450:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000452:	d032      	beq.n	80004ba <HAL_DMA_IRQHandler+0x7a>
 8000454:	074d      	lsls	r5, r1, #29
 8000456:	d530      	bpl.n	80004ba <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800045c:	bf5e      	ittt	pl
 800045e:	681a      	ldrpl	r2, [r3, #0]
 8000460:	f022 0204 	bicpl.w	r2, r2, #4
 8000464:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000466:	4a3e      	ldr	r2, [pc, #248]	; (8000560 <HAL_DMA_IRQHandler+0x120>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d019      	beq.n	80004a0 <HAL_DMA_IRQHandler+0x60>
 800046c:	3214      	adds	r2, #20
 800046e:	4293      	cmp	r3, r2
 8000470:	d018      	beq.n	80004a4 <HAL_DMA_IRQHandler+0x64>
 8000472:	3214      	adds	r2, #20
 8000474:	4293      	cmp	r3, r2
 8000476:	d017      	beq.n	80004a8 <HAL_DMA_IRQHandler+0x68>
 8000478:	3214      	adds	r2, #20
 800047a:	4293      	cmp	r3, r2
 800047c:	d017      	beq.n	80004ae <HAL_DMA_IRQHandler+0x6e>
 800047e:	3214      	adds	r2, #20
 8000480:	4293      	cmp	r3, r2
 8000482:	d017      	beq.n	80004b4 <HAL_DMA_IRQHandler+0x74>
 8000484:	3214      	adds	r2, #20
 8000486:	4293      	cmp	r3, r2
 8000488:	bf0c      	ite	eq
 800048a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800048e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000492:	4a34      	ldr	r2, [pc, #208]	; (8000564 <HAL_DMA_IRQHandler+0x124>)
 8000494:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000496:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000498:	2b00      	cmp	r3, #0
 800049a:	d05e      	beq.n	800055a <HAL_DMA_IRQHandler+0x11a>
}
 800049c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800049e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80004a0:	2304      	movs	r3, #4
 80004a2:	e7f6      	b.n	8000492 <HAL_DMA_IRQHandler+0x52>
 80004a4:	2340      	movs	r3, #64	; 0x40
 80004a6:	e7f4      	b.n	8000492 <HAL_DMA_IRQHandler+0x52>
 80004a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ac:	e7f1      	b.n	8000492 <HAL_DMA_IRQHandler+0x52>
 80004ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004b2:	e7ee      	b.n	8000492 <HAL_DMA_IRQHandler+0x52>
 80004b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80004b8:	e7eb      	b.n	8000492 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80004ba:	2502      	movs	r5, #2
 80004bc:	4095      	lsls	r5, r2
 80004be:	4225      	tst	r5, r4
 80004c0:	d035      	beq.n	800052e <HAL_DMA_IRQHandler+0xee>
 80004c2:	078d      	lsls	r5, r1, #30
 80004c4:	d533      	bpl.n	800052e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	0694      	lsls	r4, r2, #26
 80004ca:	d406      	bmi.n	80004da <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	f022 020a 	bic.w	r2, r2, #10
 80004d2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80004d4:	2201      	movs	r2, #1
 80004d6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80004da:	4a21      	ldr	r2, [pc, #132]	; (8000560 <HAL_DMA_IRQHandler+0x120>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d019      	beq.n	8000514 <HAL_DMA_IRQHandler+0xd4>
 80004e0:	3214      	adds	r2, #20
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d018      	beq.n	8000518 <HAL_DMA_IRQHandler+0xd8>
 80004e6:	3214      	adds	r2, #20
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d017      	beq.n	800051c <HAL_DMA_IRQHandler+0xdc>
 80004ec:	3214      	adds	r2, #20
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d017      	beq.n	8000522 <HAL_DMA_IRQHandler+0xe2>
 80004f2:	3214      	adds	r2, #20
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d017      	beq.n	8000528 <HAL_DMA_IRQHandler+0xe8>
 80004f8:	3214      	adds	r2, #20
 80004fa:	4293      	cmp	r3, r2
 80004fc:	bf0c      	ite	eq
 80004fe:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000502:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000506:	4a17      	ldr	r2, [pc, #92]	; (8000564 <HAL_DMA_IRQHandler+0x124>)
 8000508:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800050a:	2300      	movs	r3, #0
 800050c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000510:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000512:	e7c1      	b.n	8000498 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000514:	2302      	movs	r3, #2
 8000516:	e7f6      	b.n	8000506 <HAL_DMA_IRQHandler+0xc6>
 8000518:	2320      	movs	r3, #32
 800051a:	e7f4      	b.n	8000506 <HAL_DMA_IRQHandler+0xc6>
 800051c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000520:	e7f1      	b.n	8000506 <HAL_DMA_IRQHandler+0xc6>
 8000522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000526:	e7ee      	b.n	8000506 <HAL_DMA_IRQHandler+0xc6>
 8000528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800052c:	e7eb      	b.n	8000506 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800052e:	2508      	movs	r5, #8
 8000530:	4095      	lsls	r5, r2
 8000532:	4225      	tst	r5, r4
 8000534:	d011      	beq.n	800055a <HAL_DMA_IRQHandler+0x11a>
 8000536:	0709      	lsls	r1, r1, #28
 8000538:	d50f      	bpl.n	800055a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800053a:	6819      	ldr	r1, [r3, #0]
 800053c:	f021 010e 	bic.w	r1, r1, #14
 8000540:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000542:	2301      	movs	r3, #1
 8000544:	fa03 f202 	lsl.w	r2, r3, r2
 8000548:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800054a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800054c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000550:	2300      	movs	r3, #0
 8000552:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000556:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000558:	e79e      	b.n	8000498 <HAL_DMA_IRQHandler+0x58>
}
 800055a:	bc70      	pop	{r4, r5, r6}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40020008 	.word	0x40020008
 8000564:	40020000 	.word	0x40020000

08000568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800056c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800056e:	4626      	mov	r6, r4
 8000570:	4b66      	ldr	r3, [pc, #408]	; (800070c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000572:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800071c <HAL_GPIO_Init+0x1b4>
 8000576:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000720 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800057a:	680a      	ldr	r2, [r1, #0]
 800057c:	fa32 f506 	lsrs.w	r5, r2, r6
 8000580:	d102      	bne.n	8000588 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000582:	b003      	add	sp, #12
 8000584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000588:	f04f 0801 	mov.w	r8, #1
 800058c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000590:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000594:	4590      	cmp	r8, r2
 8000596:	d17f      	bne.n	8000698 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000598:	684d      	ldr	r5, [r1, #4]
 800059a:	2d12      	cmp	r5, #18
 800059c:	f000 80aa 	beq.w	80006f4 <HAL_GPIO_Init+0x18c>
 80005a0:	f200 8083 	bhi.w	80006aa <HAL_GPIO_Init+0x142>
 80005a4:	2d02      	cmp	r5, #2
 80005a6:	f000 80a2 	beq.w	80006ee <HAL_GPIO_Init+0x186>
 80005aa:	d877      	bhi.n	800069c <HAL_GPIO_Init+0x134>
 80005ac:	2d00      	cmp	r5, #0
 80005ae:	f000 8089 	beq.w	80006c4 <HAL_GPIO_Init+0x15c>
 80005b2:	2d01      	cmp	r5, #1
 80005b4:	f000 8099 	beq.w	80006ea <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005b8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005bc:	2aff      	cmp	r2, #255	; 0xff
 80005be:	bf93      	iteet	ls
 80005c0:	4682      	movls	sl, r0
 80005c2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80005c6:	3d08      	subhi	r5, #8
 80005c8:	f8d0 b000 	ldrls.w	fp, [r0]
 80005cc:	bf92      	itee	ls
 80005ce:	00b5      	lslls	r5, r6, #2
 80005d0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80005d4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005d6:	fa09 f805 	lsl.w	r8, r9, r5
 80005da:	ea2b 0808 	bic.w	r8, fp, r8
 80005de:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005e2:	bf88      	it	hi
 80005e4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005e8:	ea48 0505 	orr.w	r5, r8, r5
 80005ec:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005f0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80005f4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80005f8:	d04e      	beq.n	8000698 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005fa:	4d45      	ldr	r5, [pc, #276]	; (8000710 <HAL_GPIO_Init+0x1a8>)
 80005fc:	4f44      	ldr	r7, [pc, #272]	; (8000710 <HAL_GPIO_Init+0x1a8>)
 80005fe:	69ad      	ldr	r5, [r5, #24]
 8000600:	f026 0803 	bic.w	r8, r6, #3
 8000604:	f045 0501 	orr.w	r5, r5, #1
 8000608:	61bd      	str	r5, [r7, #24]
 800060a:	69bd      	ldr	r5, [r7, #24]
 800060c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000610:	f005 0501 	and.w	r5, r5, #1
 8000614:	9501      	str	r5, [sp, #4]
 8000616:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800061a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800061e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000620:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000624:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000628:	fa09 f90b 	lsl.w	r9, r9, fp
 800062c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000630:	4d38      	ldr	r5, [pc, #224]	; (8000714 <HAL_GPIO_Init+0x1ac>)
 8000632:	42a8      	cmp	r0, r5
 8000634:	d063      	beq.n	80006fe <HAL_GPIO_Init+0x196>
 8000636:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800063a:	42a8      	cmp	r0, r5
 800063c:	d061      	beq.n	8000702 <HAL_GPIO_Init+0x19a>
 800063e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000642:	42a8      	cmp	r0, r5
 8000644:	d05f      	beq.n	8000706 <HAL_GPIO_Init+0x19e>
 8000646:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800064a:	42a8      	cmp	r0, r5
 800064c:	bf0c      	ite	eq
 800064e:	2503      	moveq	r5, #3
 8000650:	2504      	movne	r5, #4
 8000652:	fa05 f50b 	lsl.w	r5, r5, fp
 8000656:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800065a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800065e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000660:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000664:	bf14      	ite	ne
 8000666:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000668:	4395      	biceq	r5, r2
 800066a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800066c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800066e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000672:	bf14      	ite	ne
 8000674:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000676:	4395      	biceq	r5, r2
 8000678:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800067a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000680:	bf14      	ite	ne
 8000682:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000684:	4395      	biceq	r5, r2
 8000686:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000688:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800068a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800068e:	bf14      	ite	ne
 8000690:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000692:	ea25 0202 	biceq.w	r2, r5, r2
 8000696:	60da      	str	r2, [r3, #12]
	position++;
 8000698:	3601      	adds	r6, #1
 800069a:	e76e      	b.n	800057a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800069c:	2d03      	cmp	r5, #3
 800069e:	d022      	beq.n	80006e6 <HAL_GPIO_Init+0x17e>
 80006a0:	2d11      	cmp	r5, #17
 80006a2:	d189      	bne.n	80005b8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80006a4:	68cc      	ldr	r4, [r1, #12]
 80006a6:	3404      	adds	r4, #4
          break;
 80006a8:	e786      	b.n	80005b8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80006aa:	4f1b      	ldr	r7, [pc, #108]	; (8000718 <HAL_GPIO_Init+0x1b0>)
 80006ac:	42bd      	cmp	r5, r7
 80006ae:	d009      	beq.n	80006c4 <HAL_GPIO_Init+0x15c>
 80006b0:	d812      	bhi.n	80006d8 <HAL_GPIO_Init+0x170>
 80006b2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000724 <HAL_GPIO_Init+0x1bc>
 80006b6:	454d      	cmp	r5, r9
 80006b8:	d004      	beq.n	80006c4 <HAL_GPIO_Init+0x15c>
 80006ba:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80006be:	454d      	cmp	r5, r9
 80006c0:	f47f af7a 	bne.w	80005b8 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80006c4:	688c      	ldr	r4, [r1, #8]
 80006c6:	b1c4      	cbz	r4, 80006fa <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80006c8:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80006ca:	bf0c      	ite	eq
 80006cc:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80006d0:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006d4:	2408      	movs	r4, #8
 80006d6:	e76f      	b.n	80005b8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80006d8:	4575      	cmp	r5, lr
 80006da:	d0f3      	beq.n	80006c4 <HAL_GPIO_Init+0x15c>
 80006dc:	4565      	cmp	r5, ip
 80006de:	d0f1      	beq.n	80006c4 <HAL_GPIO_Init+0x15c>
 80006e0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000728 <HAL_GPIO_Init+0x1c0>
 80006e4:	e7eb      	b.n	80006be <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80006e6:	2400      	movs	r4, #0
 80006e8:	e766      	b.n	80005b8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80006ea:	68cc      	ldr	r4, [r1, #12]
          break;
 80006ec:	e764      	b.n	80005b8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006ee:	68cc      	ldr	r4, [r1, #12]
 80006f0:	3408      	adds	r4, #8
          break;
 80006f2:	e761      	b.n	80005b8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006f4:	68cc      	ldr	r4, [r1, #12]
 80006f6:	340c      	adds	r4, #12
          break;
 80006f8:	e75e      	b.n	80005b8 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80006fa:	2404      	movs	r4, #4
 80006fc:	e75c      	b.n	80005b8 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80006fe:	2500      	movs	r5, #0
 8000700:	e7a7      	b.n	8000652 <HAL_GPIO_Init+0xea>
 8000702:	2501      	movs	r5, #1
 8000704:	e7a5      	b.n	8000652 <HAL_GPIO_Init+0xea>
 8000706:	2502      	movs	r5, #2
 8000708:	e7a3      	b.n	8000652 <HAL_GPIO_Init+0xea>
 800070a:	bf00      	nop
 800070c:	40010400 	.word	0x40010400
 8000710:	40021000 	.word	0x40021000
 8000714:	40010800 	.word	0x40010800
 8000718:	10210000 	.word	0x10210000
 800071c:	10310000 	.word	0x10310000
 8000720:	10320000 	.word	0x10320000
 8000724:	10110000 	.word	0x10110000
 8000728:	10220000 	.word	0x10220000

0800072c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800072c:	b10a      	cbz	r2, 8000732 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800072e:	6101      	str	r1, [r0, #16]
 8000730:	4770      	bx	lr
 8000732:	0409      	lsls	r1, r1, #16
 8000734:	e7fb      	b.n	800072e <HAL_GPIO_WritePin+0x2>
	...

08000738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000738:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800073c:	4605      	mov	r5, r0
 800073e:	b908      	cbnz	r0, 8000744 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000740:	2001      	movs	r0, #1
 8000742:	e03c      	b.n	80007be <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000744:	6803      	ldr	r3, [r0, #0]
 8000746:	07db      	lsls	r3, r3, #31
 8000748:	d410      	bmi.n	800076c <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800074a:	682b      	ldr	r3, [r5, #0]
 800074c:	079f      	lsls	r7, r3, #30
 800074e:	d45d      	bmi.n	800080c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000750:	682b      	ldr	r3, [r5, #0]
 8000752:	0719      	lsls	r1, r3, #28
 8000754:	f100 8094 	bmi.w	8000880 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000758:	682b      	ldr	r3, [r5, #0]
 800075a:	075a      	lsls	r2, r3, #29
 800075c:	f100 80be 	bmi.w	80008dc <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000760:	69e8      	ldr	r0, [r5, #28]
 8000762:	2800      	cmp	r0, #0
 8000764:	f040 812c 	bne.w	80009c0 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000768:	2000      	movs	r0, #0
 800076a:	e028      	b.n	80007be <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800076c:	4c8f      	ldr	r4, [pc, #572]	; (80009ac <HAL_RCC_OscConfig+0x274>)
 800076e:	6863      	ldr	r3, [r4, #4]
 8000770:	f003 030c 	and.w	r3, r3, #12
 8000774:	2b04      	cmp	r3, #4
 8000776:	d007      	beq.n	8000788 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000778:	6863      	ldr	r3, [r4, #4]
 800077a:	f003 030c 	and.w	r3, r3, #12
 800077e:	2b08      	cmp	r3, #8
 8000780:	d109      	bne.n	8000796 <HAL_RCC_OscConfig+0x5e>
 8000782:	6863      	ldr	r3, [r4, #4]
 8000784:	03de      	lsls	r6, r3, #15
 8000786:	d506      	bpl.n	8000796 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000788:	6823      	ldr	r3, [r4, #0]
 800078a:	039c      	lsls	r4, r3, #14
 800078c:	d5dd      	bpl.n	800074a <HAL_RCC_OscConfig+0x12>
 800078e:	686b      	ldr	r3, [r5, #4]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1da      	bne.n	800074a <HAL_RCC_OscConfig+0x12>
 8000794:	e7d4      	b.n	8000740 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000796:	686b      	ldr	r3, [r5, #4]
 8000798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800079c:	d112      	bne.n	80007c4 <HAL_RCC_OscConfig+0x8c>
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007a4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007a6:	f7ff fd13 	bl	80001d0 <HAL_GetTick>
 80007aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007ac:	6823      	ldr	r3, [r4, #0]
 80007ae:	0398      	lsls	r0, r3, #14
 80007b0:	d4cb      	bmi.n	800074a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007b2:	f7ff fd0d 	bl	80001d0 <HAL_GetTick>
 80007b6:	1b80      	subs	r0, r0, r6
 80007b8:	2864      	cmp	r0, #100	; 0x64
 80007ba:	d9f7      	bls.n	80007ac <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80007bc:	2003      	movs	r0, #3
}
 80007be:	b002      	add	sp, #8
 80007c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007c4:	b99b      	cbnz	r3, 80007ee <HAL_RCC_OscConfig+0xb6>
 80007c6:	6823      	ldr	r3, [r4, #0]
 80007c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007cc:	6023      	str	r3, [r4, #0]
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007d6:	f7ff fcfb 	bl	80001d0 <HAL_GetTick>
 80007da:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007dc:	6823      	ldr	r3, [r4, #0]
 80007de:	0399      	lsls	r1, r3, #14
 80007e0:	d5b3      	bpl.n	800074a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007e2:	f7ff fcf5 	bl	80001d0 <HAL_GetTick>
 80007e6:	1b80      	subs	r0, r0, r6
 80007e8:	2864      	cmp	r0, #100	; 0x64
 80007ea:	d9f7      	bls.n	80007dc <HAL_RCC_OscConfig+0xa4>
 80007ec:	e7e6      	b.n	80007bc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007f2:	6823      	ldr	r3, [r4, #0]
 80007f4:	d103      	bne.n	80007fe <HAL_RCC_OscConfig+0xc6>
 80007f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007fa:	6023      	str	r3, [r4, #0]
 80007fc:	e7cf      	b.n	800079e <HAL_RCC_OscConfig+0x66>
 80007fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000802:	6023      	str	r3, [r4, #0]
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800080a:	e7cb      	b.n	80007a4 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800080c:	4c67      	ldr	r4, [pc, #412]	; (80009ac <HAL_RCC_OscConfig+0x274>)
 800080e:	6863      	ldr	r3, [r4, #4]
 8000810:	f013 0f0c 	tst.w	r3, #12
 8000814:	d007      	beq.n	8000826 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000816:	6863      	ldr	r3, [r4, #4]
 8000818:	f003 030c 	and.w	r3, r3, #12
 800081c:	2b08      	cmp	r3, #8
 800081e:	d110      	bne.n	8000842 <HAL_RCC_OscConfig+0x10a>
 8000820:	6863      	ldr	r3, [r4, #4]
 8000822:	03da      	lsls	r2, r3, #15
 8000824:	d40d      	bmi.n	8000842 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000826:	6823      	ldr	r3, [r4, #0]
 8000828:	079b      	lsls	r3, r3, #30
 800082a:	d502      	bpl.n	8000832 <HAL_RCC_OscConfig+0xfa>
 800082c:	692b      	ldr	r3, [r5, #16]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d186      	bne.n	8000740 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000832:	6823      	ldr	r3, [r4, #0]
 8000834:	696a      	ldr	r2, [r5, #20]
 8000836:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800083a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800083e:	6023      	str	r3, [r4, #0]
 8000840:	e786      	b.n	8000750 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000842:	692a      	ldr	r2, [r5, #16]
 8000844:	4b5a      	ldr	r3, [pc, #360]	; (80009b0 <HAL_RCC_OscConfig+0x278>)
 8000846:	b16a      	cbz	r2, 8000864 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000848:	2201      	movs	r2, #1
 800084a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800084c:	f7ff fcc0 	bl	80001d0 <HAL_GetTick>
 8000850:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	079f      	lsls	r7, r3, #30
 8000856:	d4ec      	bmi.n	8000832 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000858:	f7ff fcba 	bl	80001d0 <HAL_GetTick>
 800085c:	1b80      	subs	r0, r0, r6
 800085e:	2802      	cmp	r0, #2
 8000860:	d9f7      	bls.n	8000852 <HAL_RCC_OscConfig+0x11a>
 8000862:	e7ab      	b.n	80007bc <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000864:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000866:	f7ff fcb3 	bl	80001d0 <HAL_GetTick>
 800086a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800086c:	6823      	ldr	r3, [r4, #0]
 800086e:	0798      	lsls	r0, r3, #30
 8000870:	f57f af6e 	bpl.w	8000750 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000874:	f7ff fcac 	bl	80001d0 <HAL_GetTick>
 8000878:	1b80      	subs	r0, r0, r6
 800087a:	2802      	cmp	r0, #2
 800087c:	d9f6      	bls.n	800086c <HAL_RCC_OscConfig+0x134>
 800087e:	e79d      	b.n	80007bc <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000880:	69aa      	ldr	r2, [r5, #24]
 8000882:	4c4a      	ldr	r4, [pc, #296]	; (80009ac <HAL_RCC_OscConfig+0x274>)
 8000884:	4b4b      	ldr	r3, [pc, #300]	; (80009b4 <HAL_RCC_OscConfig+0x27c>)
 8000886:	b1da      	cbz	r2, 80008c0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000888:	2201      	movs	r2, #1
 800088a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800088c:	f7ff fca0 	bl	80001d0 <HAL_GetTick>
 8000890:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000894:	079b      	lsls	r3, r3, #30
 8000896:	d50d      	bpl.n	80008b4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000898:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800089c:	4b46      	ldr	r3, [pc, #280]	; (80009b8 <HAL_RCC_OscConfig+0x280>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80008a4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80008a6:	bf00      	nop
  }
  while (Delay --);
 80008a8:	9b01      	ldr	r3, [sp, #4]
 80008aa:	1e5a      	subs	r2, r3, #1
 80008ac:	9201      	str	r2, [sp, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1f9      	bne.n	80008a6 <HAL_RCC_OscConfig+0x16e>
 80008b2:	e751      	b.n	8000758 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80008b4:	f7ff fc8c 	bl	80001d0 <HAL_GetTick>
 80008b8:	1b80      	subs	r0, r0, r6
 80008ba:	2802      	cmp	r0, #2
 80008bc:	d9e9      	bls.n	8000892 <HAL_RCC_OscConfig+0x15a>
 80008be:	e77d      	b.n	80007bc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80008c0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80008c2:	f7ff fc85 	bl	80001d0 <HAL_GetTick>
 80008c6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008ca:	079f      	lsls	r7, r3, #30
 80008cc:	f57f af44 	bpl.w	8000758 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80008d0:	f7ff fc7e 	bl	80001d0 <HAL_GetTick>
 80008d4:	1b80      	subs	r0, r0, r6
 80008d6:	2802      	cmp	r0, #2
 80008d8:	d9f6      	bls.n	80008c8 <HAL_RCC_OscConfig+0x190>
 80008da:	e76f      	b.n	80007bc <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008dc:	4c33      	ldr	r4, [pc, #204]	; (80009ac <HAL_RCC_OscConfig+0x274>)
 80008de:	69e3      	ldr	r3, [r4, #28]
 80008e0:	00d8      	lsls	r0, r3, #3
 80008e2:	d424      	bmi.n	800092e <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80008e4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	69e3      	ldr	r3, [r4, #28]
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	61e3      	str	r3, [r4, #28]
 80008ee:	69e3      	ldr	r3, [r4, #28]
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008f8:	4e30      	ldr	r6, [pc, #192]	; (80009bc <HAL_RCC_OscConfig+0x284>)
 80008fa:	6833      	ldr	r3, [r6, #0]
 80008fc:	05d9      	lsls	r1, r3, #23
 80008fe:	d518      	bpl.n	8000932 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000900:	68eb      	ldr	r3, [r5, #12]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d126      	bne.n	8000954 <HAL_RCC_OscConfig+0x21c>
 8000906:	6a23      	ldr	r3, [r4, #32]
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800090e:	f7ff fc5f 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000912:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000916:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000918:	6a23      	ldr	r3, [r4, #32]
 800091a:	079b      	lsls	r3, r3, #30
 800091c:	d53f      	bpl.n	800099e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800091e:	2f00      	cmp	r7, #0
 8000920:	f43f af1e 	beq.w	8000760 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000924:	69e3      	ldr	r3, [r4, #28]
 8000926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800092a:	61e3      	str	r3, [r4, #28]
 800092c:	e718      	b.n	8000760 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800092e:	2700      	movs	r7, #0
 8000930:	e7e2      	b.n	80008f8 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000932:	6833      	ldr	r3, [r6, #0]
 8000934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000938:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800093a:	f7ff fc49 	bl	80001d0 <HAL_GetTick>
 800093e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000940:	6833      	ldr	r3, [r6, #0]
 8000942:	05da      	lsls	r2, r3, #23
 8000944:	d4dc      	bmi.n	8000900 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000946:	f7ff fc43 	bl	80001d0 <HAL_GetTick>
 800094a:	eba0 0008 	sub.w	r0, r0, r8
 800094e:	2864      	cmp	r0, #100	; 0x64
 8000950:	d9f6      	bls.n	8000940 <HAL_RCC_OscConfig+0x208>
 8000952:	e733      	b.n	80007bc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000954:	b9ab      	cbnz	r3, 8000982 <HAL_RCC_OscConfig+0x24a>
 8000956:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000958:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800095c:	f023 0301 	bic.w	r3, r3, #1
 8000960:	6223      	str	r3, [r4, #32]
 8000962:	6a23      	ldr	r3, [r4, #32]
 8000964:	f023 0304 	bic.w	r3, r3, #4
 8000968:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800096a:	f7ff fc31 	bl	80001d0 <HAL_GetTick>
 800096e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000970:	6a23      	ldr	r3, [r4, #32]
 8000972:	0798      	lsls	r0, r3, #30
 8000974:	d5d3      	bpl.n	800091e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000976:	f7ff fc2b 	bl	80001d0 <HAL_GetTick>
 800097a:	1b80      	subs	r0, r0, r6
 800097c:	4540      	cmp	r0, r8
 800097e:	d9f7      	bls.n	8000970 <HAL_RCC_OscConfig+0x238>
 8000980:	e71c      	b.n	80007bc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000982:	2b05      	cmp	r3, #5
 8000984:	6a23      	ldr	r3, [r4, #32]
 8000986:	d103      	bne.n	8000990 <HAL_RCC_OscConfig+0x258>
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6223      	str	r3, [r4, #32]
 800098e:	e7ba      	b.n	8000906 <HAL_RCC_OscConfig+0x1ce>
 8000990:	f023 0301 	bic.w	r3, r3, #1
 8000994:	6223      	str	r3, [r4, #32]
 8000996:	6a23      	ldr	r3, [r4, #32]
 8000998:	f023 0304 	bic.w	r3, r3, #4
 800099c:	e7b6      	b.n	800090c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800099e:	f7ff fc17 	bl	80001d0 <HAL_GetTick>
 80009a2:	eba0 0008 	sub.w	r0, r0, r8
 80009a6:	42b0      	cmp	r0, r6
 80009a8:	d9b6      	bls.n	8000918 <HAL_RCC_OscConfig+0x1e0>
 80009aa:	e707      	b.n	80007bc <HAL_RCC_OscConfig+0x84>
 80009ac:	40021000 	.word	0x40021000
 80009b0:	42420000 	.word	0x42420000
 80009b4:	42420480 	.word	0x42420480
 80009b8:	2000000c 	.word	0x2000000c
 80009bc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009c0:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <HAL_RCC_OscConfig+0x334>)
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	461c      	mov	r4, r3
 80009c6:	f002 020c 	and.w	r2, r2, #12
 80009ca:	2a08      	cmp	r2, #8
 80009cc:	d03d      	beq.n	8000a4a <HAL_RCC_OscConfig+0x312>
 80009ce:	2300      	movs	r3, #0
 80009d0:	4e27      	ldr	r6, [pc, #156]	; (8000a70 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009d2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80009d4:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009d6:	d12b      	bne.n	8000a30 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80009d8:	f7ff fbfa 	bl	80001d0 <HAL_GetTick>
 80009dc:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	0199      	lsls	r1, r3, #6
 80009e2:	d41f      	bmi.n	8000a24 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80009e4:	6a2b      	ldr	r3, [r5, #32]
 80009e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009ea:	d105      	bne.n	80009f8 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80009ec:	6862      	ldr	r2, [r4, #4]
 80009ee:	68a9      	ldr	r1, [r5, #8]
 80009f0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80009f4:	430a      	orrs	r2, r1
 80009f6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009f8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80009fa:	6862      	ldr	r2, [r4, #4]
 80009fc:	430b      	orrs	r3, r1
 80009fe:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000a02:	4313      	orrs	r3, r2
 8000a04:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a06:	2301      	movs	r3, #1
 8000a08:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000a0a:	f7ff fbe1 	bl	80001d0 <HAL_GetTick>
 8000a0e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a10:	6823      	ldr	r3, [r4, #0]
 8000a12:	019a      	lsls	r2, r3, #6
 8000a14:	f53f aea8 	bmi.w	8000768 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a18:	f7ff fbda 	bl	80001d0 <HAL_GetTick>
 8000a1c:	1b40      	subs	r0, r0, r5
 8000a1e:	2802      	cmp	r0, #2
 8000a20:	d9f6      	bls.n	8000a10 <HAL_RCC_OscConfig+0x2d8>
 8000a22:	e6cb      	b.n	80007bc <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a24:	f7ff fbd4 	bl	80001d0 <HAL_GetTick>
 8000a28:	1bc0      	subs	r0, r0, r7
 8000a2a:	2802      	cmp	r0, #2
 8000a2c:	d9d7      	bls.n	80009de <HAL_RCC_OscConfig+0x2a6>
 8000a2e:	e6c5      	b.n	80007bc <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000a30:	f7ff fbce 	bl	80001d0 <HAL_GetTick>
 8000a34:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a36:	6823      	ldr	r3, [r4, #0]
 8000a38:	019b      	lsls	r3, r3, #6
 8000a3a:	f57f ae95 	bpl.w	8000768 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a3e:	f7ff fbc7 	bl	80001d0 <HAL_GetTick>
 8000a42:	1b40      	subs	r0, r0, r5
 8000a44:	2802      	cmp	r0, #2
 8000a46:	d9f6      	bls.n	8000a36 <HAL_RCC_OscConfig+0x2fe>
 8000a48:	e6b8      	b.n	80007bc <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000a4a:	2801      	cmp	r0, #1
 8000a4c:	f43f aeb7 	beq.w	80007be <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000a50:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a52:	6a2b      	ldr	r3, [r5, #32]
 8000a54:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	f47f ae71 	bne.w	8000740 <HAL_RCC_OscConfig+0x8>
 8000a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000a60:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000a64:	1ac0      	subs	r0, r0, r3
 8000a66:	bf18      	it	ne
 8000a68:	2001      	movne	r0, #1
 8000a6a:	e6a8      	b.n	80007be <HAL_RCC_OscConfig+0x86>
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	42420060 	.word	0x42420060

08000a74 <HAL_RCC_GetSysClockFreq>:
{
 8000a74:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000a78:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a7a:	ac02      	add	r4, sp, #8
 8000a7c:	f103 0510 	add.w	r5, r3, #16
 8000a80:	4622      	mov	r2, r4
 8000a82:	6818      	ldr	r0, [r3, #0]
 8000a84:	6859      	ldr	r1, [r3, #4]
 8000a86:	3308      	adds	r3, #8
 8000a88:	c203      	stmia	r2!, {r0, r1}
 8000a8a:	42ab      	cmp	r3, r5
 8000a8c:	4614      	mov	r4, r2
 8000a8e:	d1f7      	bne.n	8000a80 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a90:	2301      	movs	r3, #1
 8000a92:	f88d 3004 	strb.w	r3, [sp, #4]
 8000a96:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000a98:	4911      	ldr	r1, [pc, #68]	; (8000ae0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a9a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000a9e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000aa0:	f003 020c 	and.w	r2, r3, #12
 8000aa4:	2a08      	cmp	r2, #8
 8000aa6:	d117      	bne.n	8000ad8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000aa8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000aac:	a806      	add	r0, sp, #24
 8000aae:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ab0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ab2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ab6:	d50c      	bpl.n	8000ad2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ab8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000aba:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000abc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ac0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ac2:	aa06      	add	r2, sp, #24
 8000ac4:	4413      	add	r3, r2
 8000ac6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000aca:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000ace:	b007      	add	sp, #28
 8000ad0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <HAL_RCC_GetSysClockFreq+0x74>)
 8000ad4:	4350      	muls	r0, r2
 8000ad6:	e7fa      	b.n	8000ace <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000ada:	e7f8      	b.n	8000ace <HAL_RCC_GetSysClockFreq+0x5a>
 8000adc:	08001ac8 	.word	0x08001ac8
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	007a1200 	.word	0x007a1200
 8000ae8:	003d0900 	.word	0x003d0900

08000aec <HAL_RCC_ClockConfig>:
{
 8000aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000af0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000af2:	4604      	mov	r4, r0
 8000af4:	b910      	cbnz	r0, 8000afc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000af6:	2001      	movs	r0, #1
 8000af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000afc:	4a45      	ldr	r2, [pc, #276]	; (8000c14 <HAL_RCC_ClockConfig+0x128>)
 8000afe:	6813      	ldr	r3, [r2, #0]
 8000b00:	f003 0307 	and.w	r3, r3, #7
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d329      	bcc.n	8000b5c <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b08:	6821      	ldr	r1, [r4, #0]
 8000b0a:	078e      	lsls	r6, r1, #30
 8000b0c:	d431      	bmi.n	8000b72 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b0e:	07ca      	lsls	r2, r1, #31
 8000b10:	d444      	bmi.n	8000b9c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000b12:	4a40      	ldr	r2, [pc, #256]	; (8000c14 <HAL_RCC_ClockConfig+0x128>)
 8000b14:	6813      	ldr	r3, [r2, #0]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	429d      	cmp	r5, r3
 8000b1c:	d367      	bcc.n	8000bee <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b1e:	6822      	ldr	r2, [r4, #0]
 8000b20:	4d3d      	ldr	r5, [pc, #244]	; (8000c18 <HAL_RCC_ClockConfig+0x12c>)
 8000b22:	f012 0f04 	tst.w	r2, #4
 8000b26:	d16e      	bne.n	8000c06 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b28:	0713      	lsls	r3, r2, #28
 8000b2a:	d506      	bpl.n	8000b3a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b2c:	686b      	ldr	r3, [r5, #4]
 8000b2e:	6922      	ldr	r2, [r4, #16]
 8000b30:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b34:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b38:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000b3a:	f7ff ff9b 	bl	8000a74 <HAL_RCC_GetSysClockFreq>
 8000b3e:	686b      	ldr	r3, [r5, #4]
 8000b40:	4a36      	ldr	r2, [pc, #216]	; (8000c1c <HAL_RCC_ClockConfig+0x130>)
 8000b42:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b46:	5cd3      	ldrb	r3, [r2, r3]
 8000b48:	40d8      	lsrs	r0, r3
 8000b4a:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <HAL_RCC_ClockConfig+0x134>)
 8000b4c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000b4e:	4b35      	ldr	r3, [pc, #212]	; (8000c24 <HAL_RCC_ClockConfig+0x138>)
 8000b50:	6818      	ldr	r0, [r3, #0]
 8000b52:	f7ff fafb 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000b56:	2000      	movs	r0, #0
 8000b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b5c:	6813      	ldr	r3, [r2, #0]
 8000b5e:	f023 0307 	bic.w	r3, r3, #7
 8000b62:	430b      	orrs	r3, r1
 8000b64:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b66:	6813      	ldr	r3, [r2, #0]
 8000b68:	f003 0307 	and.w	r3, r3, #7
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d1c2      	bne.n	8000af6 <HAL_RCC_ClockConfig+0xa>
 8000b70:	e7ca      	b.n	8000b08 <HAL_RCC_ClockConfig+0x1c>
 8000b72:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b74:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b78:	bf1e      	ittt	ne
 8000b7a:	685a      	ldrne	r2, [r3, #4]
 8000b7c:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000b80:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b82:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b84:	bf42      	ittt	mi
 8000b86:	685a      	ldrmi	r2, [r3, #4]
 8000b88:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000b8c:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	68a0      	ldr	r0, [r4, #8]
 8000b92:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000b96:	4302      	orrs	r2, r0
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	e7b8      	b.n	8000b0e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b9c:	6862      	ldr	r2, [r4, #4]
 8000b9e:	4e1e      	ldr	r6, [pc, #120]	; (8000c18 <HAL_RCC_ClockConfig+0x12c>)
 8000ba0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba2:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ba4:	d11b      	bne.n	8000bde <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000baa:	d0a4      	beq.n	8000af6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bac:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bae:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bb2:	f023 0303 	bic.w	r3, r3, #3
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000bba:	f7ff fb09 	bl	80001d0 <HAL_GetTick>
 8000bbe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bc0:	6873      	ldr	r3, [r6, #4]
 8000bc2:	6862      	ldr	r2, [r4, #4]
 8000bc4:	f003 030c 	and.w	r3, r3, #12
 8000bc8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000bcc:	d0a1      	beq.n	8000b12 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bce:	f7ff faff 	bl	80001d0 <HAL_GetTick>
 8000bd2:	1bc0      	subs	r0, r0, r7
 8000bd4:	4540      	cmp	r0, r8
 8000bd6:	d9f3      	bls.n	8000bc0 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000bd8:	2003      	movs	r0, #3
}
 8000bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bde:	2a02      	cmp	r2, #2
 8000be0:	d102      	bne.n	8000be8 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000be2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000be6:	e7e0      	b.n	8000baa <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000be8:	f013 0f02 	tst.w	r3, #2
 8000bec:	e7dd      	b.n	8000baa <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bee:	6813      	ldr	r3, [r2, #0]
 8000bf0:	f023 0307 	bic.w	r3, r3, #7
 8000bf4:	432b      	orrs	r3, r5
 8000bf6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bf8:	6813      	ldr	r3, [r2, #0]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	429d      	cmp	r5, r3
 8000c00:	f47f af79 	bne.w	8000af6 <HAL_RCC_ClockConfig+0xa>
 8000c04:	e78b      	b.n	8000b1e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c06:	686b      	ldr	r3, [r5, #4]
 8000c08:	68e1      	ldr	r1, [r4, #12]
 8000c0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c0e:	430b      	orrs	r3, r1
 8000c10:	606b      	str	r3, [r5, #4]
 8000c12:	e789      	b.n	8000b28 <HAL_RCC_ClockConfig+0x3c>
 8000c14:	40022000 	.word	0x40022000
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	08001aec 	.word	0x08001aec
 8000c20:	2000000c 	.word	0x2000000c
 8000c24:	20000004 	.word	0x20000004

08000c28 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000c32:	5cd3      	ldrb	r3, [r2, r3]
 8000c34:	4a03      	ldr	r2, [pc, #12]	; (8000c44 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c36:	6810      	ldr	r0, [r2, #0]
}
 8000c38:	40d8      	lsrs	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	08001afc 	.word	0x08001afc
 8000c44:	2000000c 	.word	0x2000000c

08000c48 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000c52:	5cd3      	ldrb	r3, [r2, r3]
 8000c54:	4a03      	ldr	r2, [pc, #12]	; (8000c64 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000c56:	6810      	ldr	r0, [r2, #0]
}
 8000c58:	40d8      	lsrs	r0, r3
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	08001afc 	.word	0x08001afc
 8000c64:	2000000c 	.word	0x2000000c

08000c68 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000c68:	6803      	ldr	r3, [r0, #0]
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000c70:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000c72:	695a      	ldr	r2, [r3, #20]
 8000c74:	f022 0201 	bic.w	r2, r2, #1
 8000c78:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000c7a:	2320      	movs	r3, #32
 8000c7c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000c80:	4770      	bx	lr
	...

08000c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000c84:	b538      	push	{r3, r4, r5, lr}
 8000c86:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000c88:	6803      	ldr	r3, [r0, #0]
 8000c8a:	68c1      	ldr	r1, [r0, #12]
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	2419      	movs	r4, #25
 8000c90:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000c94:	430a      	orrs	r2, r1
 8000c96:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c98:	6882      	ldr	r2, [r0, #8]
 8000c9a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000c9c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c9e:	4302      	orrs	r2, r0
 8000ca0:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000ca2:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000ca6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000caa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000cac:	430a      	orrs	r2, r1
 8000cae:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000cb0:	695a      	ldr	r2, [r3, #20]
 8000cb2:	69a9      	ldr	r1, [r5, #24]
 8000cb4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <UART_SetConfig+0x70>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d114      	bne.n	8000cec <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000cc2:	f7ff ffc1 	bl	8000c48 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000cc6:	4360      	muls	r0, r4
 8000cc8:	686c      	ldr	r4, [r5, #4]
 8000cca:	2264      	movs	r2, #100	; 0x64
 8000ccc:	00a4      	lsls	r4, r4, #2
 8000cce:	fbb0 f0f4 	udiv	r0, r0, r4
 8000cd2:	fbb0 f4f2 	udiv	r4, r0, r2
 8000cd6:	fb02 0314 	mls	r3, r2, r4, r0
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	3332      	adds	r3, #50	; 0x32
 8000cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ce2:	6829      	ldr	r1, [r5, #0]
 8000ce4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000ce8:	608b      	str	r3, [r1, #8]
 8000cea:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000cec:	f7ff ff9c 	bl	8000c28 <HAL_RCC_GetPCLK1Freq>
 8000cf0:	e7e9      	b.n	8000cc6 <UART_SetConfig+0x42>
 8000cf2:	bf00      	nop
 8000cf4:	40013800 	.word	0x40013800

08000cf8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	460e      	mov	r6, r1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000d02:	6821      	ldr	r1, [r4, #0]
 8000d04:	680b      	ldr	r3, [r1, #0]
 8000d06:	ea36 0303 	bics.w	r3, r6, r3
 8000d0a:	d101      	bne.n	8000d10 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000d0c:	2000      	movs	r0, #0
}
 8000d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000d10:	1c6b      	adds	r3, r5, #1
 8000d12:	d0f7      	beq.n	8000d04 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d14:	b995      	cbnz	r5, 8000d3c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000d16:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000d18:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000d20:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000d22:	695a      	ldr	r2, [r3, #20]
 8000d24:	f022 0201 	bic.w	r2, r2, #1
 8000d28:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000d2a:	2320      	movs	r3, #32
 8000d2c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000d30:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000d34:	2300      	movs	r3, #0
 8000d36:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d3c:	f7ff fa48 	bl	80001d0 <HAL_GetTick>
 8000d40:	1bc0      	subs	r0, r0, r7
 8000d42:	4285      	cmp	r5, r0
 8000d44:	d2dd      	bcs.n	8000d02 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000d46:	e7e6      	b.n	8000d16 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000d48 <HAL_UART_Init>:
{
 8000d48:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	b340      	cbz	r0, 8000da0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000d4e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000d52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d56:	b91b      	cbnz	r3, 8000d60 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000d58:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000d5c:	f000 fcf4 	bl	8001748 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000d60:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000d62:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000d64:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000d68:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000d6a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000d6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d70:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000d72:	f7ff ff87 	bl	8000c84 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d76:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d78:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d7a:	691a      	ldr	r2, [r3, #16]
 8000d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000d82:	695a      	ldr	r2, [r3, #20]
 8000d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000d88:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d90:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000d92:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d94:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000d96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000d9a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000d9e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000da0:	2001      	movs	r0, #1
}
 8000da2:	bd10      	pop	{r4, pc}

08000da4 <HAL_UART_Transmit>:
{
 8000da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000da8:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000daa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000dae:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8000db0:	2b20      	cmp	r3, #32
{
 8000db2:	460d      	mov	r5, r1
 8000db4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000db6:	d14e      	bne.n	8000e56 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d049      	beq.n	8000e50 <HAL_UART_Transmit+0xac>
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	d047      	beq.n	8000e50 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000dc0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d046      	beq.n	8000e56 <HAL_UART_Transmit+0xb2>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000dd2:	2321      	movs	r3, #33	; 0x21
 8000dd4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000dd8:	f7ff f9fa 	bl	80001d0 <HAL_GetTick>
 8000ddc:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000dde:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000de2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000de6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	b96b      	cbnz	r3, 8000e08 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	4632      	mov	r2, r6
 8000df0:	2140      	movs	r1, #64	; 0x40
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff ff80 	bl	8000cf8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000df8:	b9a8      	cbnz	r0, 8000e26 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000dfa:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000dfc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000e00:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000e08:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e0a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000e12:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e14:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000e1e:	d10e      	bne.n	8000e3e <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e20:	f7ff ff6a 	bl	8000cf8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000e24:	b110      	cbz	r0, 8000e2c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000e26:	2003      	movs	r0, #3
 8000e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000e2c:	882b      	ldrh	r3, [r5, #0]
 8000e2e:	6822      	ldr	r2, [r4, #0]
 8000e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e34:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000e36:	6923      	ldr	r3, [r4, #16]
 8000e38:	b943      	cbnz	r3, 8000e4c <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8000e3a:	3502      	adds	r5, #2
 8000e3c:	e7d3      	b.n	8000de6 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e3e:	f7ff ff5b 	bl	8000cf8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000e42:	2800      	cmp	r0, #0
 8000e44:	d1ef      	bne.n	8000e26 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	782a      	ldrb	r2, [r5, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	3501      	adds	r5, #1
 8000e4e:	e7ca      	b.n	8000de6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000e50:	2001      	movs	r0, #1
 8000e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000e56:	2002      	movs	r0, #2
}
 8000e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000e5c <HAL_UART_Receive_DMA>:
{
 8000e5c:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8000e5e:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8000e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8000e64:	2a20      	cmp	r2, #32
{
 8000e66:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8000e68:	d138      	bne.n	8000edc <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 8000e6a:	2900      	cmp	r1, #0
 8000e6c:	d034      	beq.n	8000ed8 <HAL_UART_Receive_DMA+0x7c>
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d032      	beq.n	8000ed8 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8000e72:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8000e76:	2a01      	cmp	r2, #1
 8000e78:	d030      	beq.n	8000edc <HAL_UART_Receive_DMA+0x80>
 8000e7a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e7c:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8000e7e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000e82:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8000e84:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8000e86:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e88:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000e8a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8000e8e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000e90:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8000e92:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8000e94:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8000e96:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <HAL_UART_Receive_DMA+0x88>)
    huart->hdmarx->XferAbortCallback = NULL;
 8000e98:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8000e9a:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8000e9c:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <HAL_UART_Receive_DMA+0x8c>)
 8000e9e:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	1d31      	adds	r1, r6, #4
 8000ea4:	f7ff fa46 	bl	8000334 <HAL_DMA_Start_IT>
    return HAL_OK;
 8000ea8:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 8000eaa:	682b      	ldr	r3, [r5, #0]
 8000eac:	9401      	str	r4, [sp, #4]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	9201      	str	r2, [sp, #4]
 8000eb2:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8000eb4:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8000eb8:	9201      	str	r2, [sp, #4]
 8000eba:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ec2:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000ec4:	695a      	ldr	r2, [r3, #20]
 8000ec6:	f042 0201 	orr.w	r2, r2, #1
 8000eca:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000ecc:	695a      	ldr	r2, [r3, #20]
 8000ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ed2:	615a      	str	r2, [r3, #20]
}
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000ed8:	2001      	movs	r0, #1
 8000eda:	e7fb      	b.n	8000ed4 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8000edc:	2002      	movs	r0, #2
 8000ede:	e7f9      	b.n	8000ed4 <HAL_UART_Receive_DMA+0x78>
 8000ee0:	08000ef1 	.word	0x08000ef1
 8000ee4:	08000fa7 	.word	0x08000fa7
 8000ee8:	08000fb3 	.word	0x08000fb3

08000eec <HAL_UART_TxCpltCallback>:
 8000eec:	4770      	bx	lr

08000eee <HAL_UART_RxCpltCallback>:
 8000eee:	4770      	bx	lr

08000ef0 <UART_DMAReceiveCplt>:
{
 8000ef0:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ef2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ef4:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f013 0320 	ands.w	r3, r3, #32
 8000efc:	d110      	bne.n	8000f20 <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8000efe:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8000f00:	6813      	ldr	r3, [r2, #0]
 8000f02:	68d9      	ldr	r1, [r3, #12]
 8000f04:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8000f08:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f0a:	6959      	ldr	r1, [r3, #20]
 8000f0c:	f021 0101 	bic.w	r1, r1, #1
 8000f10:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000f12:	6959      	ldr	r1, [r3, #20]
 8000f14:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000f18:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8000f1a:	2320      	movs	r3, #32
 8000f1c:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8000f20:	4610      	mov	r0, r2
 8000f22:	f7ff ffe4 	bl	8000eee <HAL_UART_RxCpltCallback>
 8000f26:	bd08      	pop	{r3, pc}

08000f28 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8000f28:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8000f2c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8000f2e:	2b22      	cmp	r3, #34	; 0x22
 8000f30:	d136      	bne.n	8000fa0 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f32:	6883      	ldr	r3, [r0, #8]
 8000f34:	6901      	ldr	r1, [r0, #16]
 8000f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f3a:	6802      	ldr	r2, [r0, #0]
 8000f3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000f3e:	d123      	bne.n	8000f88 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000f40:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8000f42:	b9e9      	cbnz	r1, 8000f80 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f48:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8000f4c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8000f4e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8000f50:	3c01      	subs	r4, #1
 8000f52:	b2a4      	uxth	r4, r4
 8000f54:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8000f56:	b98c      	cbnz	r4, 8000f7c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000f58:	6803      	ldr	r3, [r0, #0]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	f022 0220 	bic.w	r2, r2, #32
 8000f60:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f68:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000f6a:	695a      	ldr	r2, [r3, #20]
 8000f6c:	f022 0201 	bic.w	r2, r2, #1
 8000f70:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8000f72:	2320      	movs	r3, #32
 8000f74:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8000f78:	f7ff ffb9 	bl	8000eee <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8000f7c:	2000      	movs	r0, #0
}
 8000f7e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	f823 2b01 	strh.w	r2, [r3], #1
 8000f86:	e7e1      	b.n	8000f4c <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8000f88:	b921      	cbnz	r1, 8000f94 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000f8a:	1c59      	adds	r1, r3, #1
 8000f8c:	6852      	ldr	r2, [r2, #4]
 8000f8e:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	e7dc      	b.n	8000f4e <UART_Receive_IT+0x26>
 8000f94:	6852      	ldr	r2, [r2, #4]
 8000f96:	1c59      	adds	r1, r3, #1
 8000f98:	6281      	str	r1, [r0, #40]	; 0x28
 8000f9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f9e:	e7f7      	b.n	8000f90 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	bd10      	pop	{r4, pc}

08000fa4 <HAL_UART_RxHalfCpltCallback>:
 8000fa4:	4770      	bx	lr

08000fa6 <UART_DMARxHalfCplt>:
{
 8000fa6:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8000fa8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000faa:	f7ff fffb 	bl	8000fa4 <HAL_UART_RxHalfCpltCallback>
 8000fae:	bd08      	pop	{r3, pc}

08000fb0 <HAL_UART_ErrorCallback>:
 8000fb0:	4770      	bx	lr

08000fb2 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fb2:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8000fb4:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8000fb6:	680b      	ldr	r3, [r1, #0]
 8000fb8:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8000fba:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8000fbe:	2821      	cmp	r0, #33	; 0x21
 8000fc0:	d10a      	bne.n	8000fd8 <UART_DMAError+0x26>
 8000fc2:	0612      	lsls	r2, r2, #24
 8000fc4:	d508      	bpl.n	8000fd8 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000fd8:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8000fda:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8000fde:	2a22      	cmp	r2, #34	; 0x22
 8000fe0:	d106      	bne.n	8000ff0 <UART_DMAError+0x3e>
 8000fe2:	065b      	lsls	r3, r3, #25
 8000fe4:	d504      	bpl.n	8000ff0 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 8000fe6:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8000fe8:	4608      	mov	r0, r1
    huart->RxXferCount = 0x00U;
 8000fea:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8000fec:	f7ff fe3c 	bl	8000c68 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8000ff0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8000ff2:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8000ff4:	f043 0310 	orr.w	r3, r3, #16
 8000ff8:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8000ffa:	f7ff ffd9 	bl	8000fb0 <HAL_UART_ErrorCallback>
 8000ffe:	bd08      	pop	{r3, pc}

08001000 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001000:	6803      	ldr	r3, [r0, #0]
{
 8001002:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001004:	681a      	ldr	r2, [r3, #0]
{
 8001006:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001008:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800100a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800100c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800100e:	d107      	bne.n	8001020 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001010:	0696      	lsls	r6, r2, #26
 8001012:	d55a      	bpl.n	80010ca <HAL_UART_IRQHandler+0xca>
 8001014:	068d      	lsls	r5, r1, #26
 8001016:	d558      	bpl.n	80010ca <HAL_UART_IRQHandler+0xca>
}
 8001018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800101c:	f7ff bf84 	b.w	8000f28 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001020:	f015 0501 	ands.w	r5, r5, #1
 8001024:	d102      	bne.n	800102c <HAL_UART_IRQHandler+0x2c>
 8001026:	f411 7f90 	tst.w	r1, #288	; 0x120
 800102a:	d04e      	beq.n	80010ca <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800102c:	07d3      	lsls	r3, r2, #31
 800102e:	d505      	bpl.n	800103c <HAL_UART_IRQHandler+0x3c>
 8001030:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001032:	bf42      	ittt	mi
 8001034:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001036:	f043 0301 	orrmi.w	r3, r3, #1
 800103a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800103c:	0750      	lsls	r0, r2, #29
 800103e:	d504      	bpl.n	800104a <HAL_UART_IRQHandler+0x4a>
 8001040:	b11d      	cbz	r5, 800104a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001042:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800104a:	0793      	lsls	r3, r2, #30
 800104c:	d504      	bpl.n	8001058 <HAL_UART_IRQHandler+0x58>
 800104e:	b11d      	cbz	r5, 8001058 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001050:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001058:	0716      	lsls	r6, r2, #28
 800105a:	d504      	bpl.n	8001066 <HAL_UART_IRQHandler+0x66>
 800105c:	b11d      	cbz	r5, 8001066 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800105e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001066:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001068:	2b00      	cmp	r3, #0
 800106a:	d066      	beq.n	800113a <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800106c:	0695      	lsls	r5, r2, #26
 800106e:	d504      	bpl.n	800107a <HAL_UART_IRQHandler+0x7a>
 8001070:	0688      	lsls	r0, r1, #26
 8001072:	d502      	bpl.n	800107a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001074:	4620      	mov	r0, r4
 8001076:	f7ff ff57 	bl	8000f28 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800107a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800107c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800107e:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001080:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001082:	0711      	lsls	r1, r2, #28
 8001084:	d402      	bmi.n	800108c <HAL_UART_IRQHandler+0x8c>
 8001086:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800108a:	d01a      	beq.n	80010c2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800108c:	f7ff fdec 	bl	8000c68 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	695a      	ldr	r2, [r3, #20]
 8001094:	0652      	lsls	r2, r2, #25
 8001096:	d510      	bpl.n	80010ba <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001098:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800109a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800109c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010a0:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80010a2:	b150      	cbz	r0, 80010ba <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80010a4:	4b25      	ldr	r3, [pc, #148]	; (800113c <HAL_UART_IRQHandler+0x13c>)
 80010a6:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80010a8:	f7ff f982 	bl	80003b0 <HAL_DMA_Abort_IT>
 80010ac:	2800      	cmp	r0, #0
 80010ae:	d044      	beq.n	800113a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80010b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80010b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80010b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80010b8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80010ba:	4620      	mov	r0, r4
 80010bc:	f7ff ff78 	bl	8000fb0 <HAL_UART_ErrorCallback>
 80010c0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80010c2:	f7ff ff75 	bl	8000fb0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010c6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80010ca:	0616      	lsls	r6, r2, #24
 80010cc:	d527      	bpl.n	800111e <HAL_UART_IRQHandler+0x11e>
 80010ce:	060d      	lsls	r5, r1, #24
 80010d0:	d525      	bpl.n	800111e <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80010d2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80010d6:	2a21      	cmp	r2, #33	; 0x21
 80010d8:	d12f      	bne.n	800113a <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010da:	68a2      	ldr	r2, [r4, #8]
 80010dc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80010e0:	6a22      	ldr	r2, [r4, #32]
 80010e2:	d117      	bne.n	8001114 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80010e4:	8811      	ldrh	r1, [r2, #0]
 80010e6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80010ea:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80010ec:	6921      	ldr	r1, [r4, #16]
 80010ee:	b979      	cbnz	r1, 8001110 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80010f0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80010f2:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80010f4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80010f6:	3a01      	subs	r2, #1
 80010f8:	b292      	uxth	r2, r2
 80010fa:	84e2      	strh	r2, [r4, #38]	; 0x26
 80010fc:	b9ea      	cbnz	r2, 800113a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001104:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001110:	3201      	adds	r2, #1
 8001112:	e7ee      	b.n	80010f2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001114:	1c51      	adds	r1, r2, #1
 8001116:	6221      	str	r1, [r4, #32]
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	e7ea      	b.n	80010f4 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800111e:	0650      	lsls	r0, r2, #25
 8001120:	d50b      	bpl.n	800113a <HAL_UART_IRQHandler+0x13a>
 8001122:	064a      	lsls	r2, r1, #25
 8001124:	d509      	bpl.n	800113a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001126:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001128:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800112a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800112e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001130:	2320      	movs	r3, #32
 8001132:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001136:	f7ff fed9 	bl	8000eec <HAL_UART_TxCpltCallback>
 800113a:	bd70      	pop	{r4, r5, r6, pc}
 800113c:	08001141 	.word	0x08001141

08001140 <UART_DMAAbortOnError>:
{
 8001140:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001142:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001144:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001146:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001148:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800114a:	f7ff ff31 	bl	8000fb0 <HAL_UART_ErrorCallback>
 800114e:	bd08      	pop	{r3, pc}

08001150 <check_for>:
uint8_t* ptr;

extern uint8_t check_value;
uint8_t state=0;
uint8_t check_for (char *string)
{
 8001150:	2200      	movs	r2, #0
	uint16_t so_far = 0;
 8001152:	4613      	mov	r3, r2
{
 8001154:	b530      	push	{r4, r5, lr}
	for (uint16_t i=0; i<DMA_RX_BUFFER_SIZE; i++)
	{
		if (DMA_RX_Buffer[i] == string[so_far])
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <check_for+0x28>)
 8001158:	5c55      	ldrb	r5, [r2, r1]
 800115a:	5cc4      	ldrb	r4, [r0, r3]
 800115c:	42a5      	cmp	r5, r4
 800115e:	d105      	bne.n	800116c <check_for+0x1c>
		{
			so_far++;
 8001160:	3301      	adds	r3, #1
 8001162:	b29b      	uxth	r3, r3
			if (string[so_far] == 0)
 8001164:	5cc4      	ldrb	r4, [r0, r3]
 8001166:	b90c      	cbnz	r4, 800116c <check_for+0x1c>
				return so_far;
 8001168:	b2d8      	uxtb	r0, r3
 800116a:	bd30      	pop	{r4, r5, pc}
 800116c:	3201      	adds	r2, #1
	for (uint16_t i=0; i<DMA_RX_BUFFER_SIZE; i++)
 800116e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001172:	d1f1      	bne.n	8001158 <check_for+0x8>
			
		}
  }
}
 8001174:	bd30      	pop	{r4, r5, pc}
 8001176:	bf00      	nop
 8001178:	20000294 	.word	0x20000294

0800117c <DMA_IrqHandler_Uart1_Rx>:
    DMA_IrqHandler_Uart2_Rx(hdma, huart);
	}
}

void DMA_IrqHandler_Uart1_Rx (DMA_HandleTypeDef *hdma, UART_HandleTypeDef *huart)
{
 800117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__IO uint32_t IFCR;  /*!< DMA interrupt flag clear register */
	} DMA_Base_Registers;

	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->DmaBaseAddress;

	if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)   // if the source is TC
 8001180:	6803      	ldr	r3, [r0, #0]
{
 8001182:	b087      	sub	sp, #28
	if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)   // if the source is TC
 8001184:	681a      	ldr	r2, [r3, #0]
{
 8001186:	4681      	mov	r9, r0
	if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)   // if the source is TC
 8001188:	0792      	lsls	r2, r2, #30
 800118a:	f140 808d 	bpl.w	80012a8 <DMA_IrqHandler_Uart1_Rx+0x12c>
	{
		/* Clear the transfer complete flag */
//    regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800118e:	4a5a      	ldr	r2, [pc, #360]	; (80012f8 <DMA_IrqHandler_Uart1_Rx+0x17c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	f000 808c 	beq.w	80012ae <DMA_IrqHandler_Uart1_Rx+0x132>
 8001196:	3214      	adds	r2, #20
 8001198:	4293      	cmp	r3, r2
 800119a:	f000 808a 	beq.w	80012b2 <DMA_IrqHandler_Uart1_Rx+0x136>
 800119e:	3214      	adds	r2, #20
 80011a0:	4293      	cmp	r3, r2
 80011a2:	f000 8088 	beq.w	80012b6 <DMA_IrqHandler_Uart1_Rx+0x13a>
 80011a6:	3214      	adds	r2, #20
 80011a8:	4293      	cmp	r3, r2
 80011aa:	f000 8087 	beq.w	80012bc <DMA_IrqHandler_Uart1_Rx+0x140>
 80011ae:	3214      	adds	r2, #20
 80011b0:	4293      	cmp	r3, r2
 80011b2:	f000 8086 	beq.w	80012c2 <DMA_IrqHandler_Uart1_Rx+0x146>
 80011b6:	3214      	adds	r2, #20
 80011b8:	4293      	cmp	r3, r2
 80011ba:	bf0c      	ite	eq
 80011bc:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 80011c0:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->DmaBaseAddress;
 80011c4:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c

	     /* Get the length of the data */
	  len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;

	  /* Get number of bytes we can copy to the end of buffer */
	  tocopy = UART_BUFFER_SIZE - Write;
 80011c8:	4e4c      	ldr	r6, [pc, #304]	; (80012fc <DMA_IrqHandler_Uart1_Rx+0x180>)
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->DmaBaseAddress;
 80011ca:	9100      	str	r1, [sp, #0]
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011cc:	494c      	ldr	r1, [pc, #304]	; (8001300 <DMA_IrqHandler_Uart1_Rx+0x184>)
      tocopy = len;
    }

		 /* Write received data for UART main buffer for manipulation later */
        ptr = DMA_RX_Buffer;
        memcpy(&UART_Buffer[Write], ptr, tocopy);   /* Copy first part */
 80011ce:	4f4d      	ldr	r7, [pc, #308]	; (8001304 <DMA_IrqHandler_Uart1_Rx+0x188>)
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011d0:	604a      	str	r2, [r1, #4]
	  len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;
 80011d2:	685d      	ldr	r5, [r3, #4]
	  tocopy = UART_BUFFER_SIZE - Write;
 80011d4:	6833      	ldr	r3, [r6, #0]
	  len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;
 80011d6:	f5c5 7580 	rsb	r5, r5, #256	; 0x100
	  tocopy = UART_BUFFER_SIZE - Write;
 80011da:	f5c3 7480 	rsb	r4, r3, #256	; 0x100
 80011de:	42ac      	cmp	r4, r5
 80011e0:	bf28      	it	cs
 80011e2:	462c      	movcs	r4, r5
	  len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;
 80011e4:	4a48      	ldr	r2, [pc, #288]	; (8001308 <DMA_IrqHandler_Uart1_Rx+0x18c>)
        memcpy(&UART_Buffer[Write], ptr, tocopy);   /* Copy first part */
 80011e6:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8001324 <DMA_IrqHandler_Uart1_Rx+0x1a8>
 80011ea:	f8df b140 	ldr.w	fp, [pc, #320]	; 800132c <DMA_IrqHandler_Uart1_Rx+0x1b0>
	  len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;
 80011ee:	6015      	str	r5, [r2, #0]
 80011f0:	4690      	mov	r8, r2
        memcpy(&UART_Buffer[Write], ptr, tocopy);   /* Copy first part */
 80011f2:	4639      	mov	r1, r7
 80011f4:	4622      	mov	r2, r4
 80011f6:	eb0a 0003 	add.w	r0, sl, r3
	  tocopy = UART_BUFFER_SIZE - Write;
 80011fa:	f8cb 4000 	str.w	r4, [fp]
        memcpy(&UART_Buffer[Write], ptr, tocopy);   /* Copy first part */
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	f000 fc42 	bl	8001a88 <memcpy>

		/* Correct values for remaining data */
        Write += tocopy;
 8001204:	9b01      	ldr	r3, [sp, #4]
        len -= tocopy;
        ptr += tocopy;
        state++;
 8001206:	4941      	ldr	r1, [pc, #260]	; (800130c <DMA_IrqHandler_Uart1_Rx+0x190>)
        Write += tocopy;
 8001208:	4423      	add	r3, r4
 800120a:	6033      	str	r3, [r6, #0]
        state++;
 800120c:	780b      	ldrb	r3, [r1, #0]
        ptr += tocopy;
 800120e:	4a40      	ldr	r2, [pc, #256]	; (8001310 <DMA_IrqHandler_Uart1_Rx+0x194>)
        state++;
 8001210:	3301      	adds	r3, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	700b      	strb	r3, [r1, #0]
        uint8_t ack1[] = {0x10,0x31};
 8001216:	493f      	ldr	r1, [pc, #252]	; (8001314 <DMA_IrqHandler_Uart1_Rx+0x198>)
        len -= tocopy;
 8001218:	1b2d      	subs	r5, r5, r4
        uint8_t ack1[] = {0x10,0x31};
 800121a:	4608      	mov	r0, r1
        ptr += tocopy;
 800121c:	443c      	add	r4, r7
 800121e:	6014      	str	r4, [r2, #0]
        uint8_t ack1[] = {0x10,0x31};
 8001220:	f830 4b02 	ldrh.w	r4, [r0], #2
        uint8_t selecting[]= {0x04,0x40,0x41,0x05};
        uint8_t lock[] = {0x02,0x40,0x41,0x30,0x30,0x36,0x30,0x03};
		/* UNCOMMENT BELOW TO transmit the data via uart */
        switch(state){
 8001224:	2b02      	cmp	r3, #2
        uint8_t selecting[]= {0x04,0x40,0x41,0x05};
 8001226:	6800      	ldr	r0, [r0, #0]
        uint8_t ack1[] = {0x10,0x31};
 8001228:	f8ad 4008 	strh.w	r4, [sp, #8]
        uint8_t selecting[]= {0x04,0x40,0x41,0x05};
 800122c:	9003      	str	r0, [sp, #12]
        uint8_t lock[] = {0x02,0x40,0x41,0x30,0x30,0x36,0x30,0x03};
 800122e:	f851 0f06 	ldr.w	r0, [r1, #6]!
 8001232:	ac04      	add	r4, sp, #16
 8001234:	6849      	ldr	r1, [r1, #4]
        len -= tocopy;
 8001236:	f8c8 5000 	str.w	r5, [r8]
        uint8_t lock[] = {0x02,0x40,0x41,0x30,0x30,0x36,0x30,0x03};
 800123a:	c403      	stmia	r4!, {r0, r1}
 800123c:	4614      	mov	r4, r2
        switch(state){
 800123e:	d043      	beq.n	80012c8 <DMA_IrqHandler_Uart1_Rx+0x14c>
 8001240:	2b03      	cmp	r3, #3
 8001242:	d047      	beq.n	80012d4 <DMA_IrqHandler_Uart1_Rx+0x158>
 8001244:	2b01      	cmp	r3, #1
 8001246:	d14b      	bne.n	80012e0 <DMA_IrqHandler_Uart1_Rx+0x164>
        case 1:
        	set_transmit_mode_uart1();
 8001248:	f000 f948 	bl	80014dc <set_transmit_mode_uart1>
        	HAL_UART_Transmit(&huart1, ack1, 2, 10);
 800124c:	230a      	movs	r3, #10
 800124e:	2202      	movs	r2, #2
 8001250:	a902      	add	r1, sp, #8
            set_receive_mode_uart1();
           	set_receive_mode_uart2();
           	break;
        case 3:
            set_transmit_mode_uart1();
            HAL_UART_Transmit(&huart1, lock, 8, 10);
 8001252:	4831      	ldr	r0, [pc, #196]	; (8001318 <DMA_IrqHandler_Uart1_Rx+0x19c>)
            set_receive_mode_uart1();
           	set_receive_mode_uart2();
           	break;
        default:
        	set_transmit_mode_uart2();
   	        HAL_UART_Transmit(&huart2,&UART_Buffer[Write-tocopy], tocopy, 10);
 8001254:	f7ff fda6 	bl	8000da4 <HAL_UART_Transmit>
   	        set_receive_mode_uart1();
 8001258:	f000 f948 	bl	80014ec <set_receive_mode_uart1>
            set_receive_mode_uart2();
 800125c:	f000 f956 	bl	800150c <set_receive_mode_uart2>
//        HAL_UART_Transmit(&huart1, ack1, 2, 10);
//        set_receive_mode_uart1();
//		  set_receive_mode_uart2();


		check_value = check_for ("pinku");
 8001260:	482e      	ldr	r0, [pc, #184]	; (800131c <DMA_IrqHandler_Uart1_Rx+0x1a0>)
 8001262:	f7ff ff75 	bl	8001150 <check_for>
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <DMA_IrqHandler_Uart1_Rx+0x1a4>)

		/* If still data to write for beginning of buffer */
        if (len)
 8001268:	f8d8 5000 	ldr.w	r5, [r8]
		check_value = check_for ("pinku");
 800126c:	7018      	strb	r0, [r3, #0]
        if (len)
 800126e:	b15d      	cbz	r5, 8001288 <DMA_IrqHandler_Uart1_Rx+0x10c>
				{
            memcpy(&UART_Buffer[0], ptr, len);      /* Don't care if we override Read pointer now */
 8001270:	462a      	mov	r2, r5
 8001272:	6821      	ldr	r1, [r4, #0]
 8001274:	482b      	ldr	r0, [pc, #172]	; (8001324 <DMA_IrqHandler_Uart1_Rx+0x1a8>)
 8001276:	f000 fc07 	bl	8001a88 <memcpy>
            Write = len;
 800127a:	6035      	str	r5, [r6, #0]

						/* UNCOMMENT BELOW TO transmit the data via uart */
            			set_transmit_mode_uart2();
 800127c:	f000 f93e 	bl	80014fc <set_transmit_mode_uart2>
//						HAL_UART_Transmit(&huart2, UART_Buffer, len, 10);  // transmit the remaining data
						set_receive_mode_uart1();
 8001280:	f000 f934 	bl	80014ec <set_receive_mode_uart1>
						set_receive_mode_uart2();
 8001284:	f000 f942 	bl	800150c <set_receive_mode_uart2>
				}

		/* Prepare DMA for next transfer */
        /* Important! DMA stream won't start if all flags are not cleared first */

        regs->IFCR = 0x3FU << hdma->ChannelIndex; // clear all interrupts
 8001288:	233f      	movs	r3, #63	; 0x3f
 800128a:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
 800128e:	4093      	lsls	r3, r2
 8001290:	9a00      	ldr	r2, [sp, #0]
 8001292:	6093      	str	r3, [r2, #8]
				hdma->Instance->CMAR = (uint32_t)DMA_RX_Buffer;   /* Set memory address for DMA again */
        hdma->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 8001294:	f44f 7280 	mov.w	r2, #256	; 0x100
				hdma->Instance->CMAR = (uint32_t)DMA_RX_Buffer;   /* Set memory address for DMA again */
 8001298:	f8d9 3000 	ldr.w	r3, [r9]
 800129c:	60df      	str	r7, [r3, #12]
        hdma->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 800129e:	605a      	str	r2, [r3, #4]
        hdma->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	f042 0201 	orr.w	r2, r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
	}
}
 80012a8:	b007      	add	sp, #28
 80012aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012ae:	2202      	movs	r2, #2
 80012b0:	e788      	b.n	80011c4 <DMA_IrqHandler_Uart1_Rx+0x48>
 80012b2:	2220      	movs	r2, #32
 80012b4:	e786      	b.n	80011c4 <DMA_IrqHandler_Uart1_Rx+0x48>
 80012b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ba:	e783      	b.n	80011c4 <DMA_IrqHandler_Uart1_Rx+0x48>
 80012bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c0:	e780      	b.n	80011c4 <DMA_IrqHandler_Uart1_Rx+0x48>
 80012c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012c6:	e77d      	b.n	80011c4 <DMA_IrqHandler_Uart1_Rx+0x48>
            set_transmit_mode_uart1();
 80012c8:	f000 f908 	bl	80014dc <set_transmit_mode_uart1>
            HAL_UART_Transmit(&huart1, selecting, 4, 10);
 80012cc:	230a      	movs	r3, #10
 80012ce:	2204      	movs	r2, #4
 80012d0:	a903      	add	r1, sp, #12
 80012d2:	e7be      	b.n	8001252 <DMA_IrqHandler_Uart1_Rx+0xd6>
            set_transmit_mode_uart1();
 80012d4:	f000 f902 	bl	80014dc <set_transmit_mode_uart1>
            HAL_UART_Transmit(&huart1, lock, 8, 10);
 80012d8:	230a      	movs	r3, #10
 80012da:	2208      	movs	r2, #8
 80012dc:	a904      	add	r1, sp, #16
 80012de:	e7b8      	b.n	8001252 <DMA_IrqHandler_Uart1_Rx+0xd6>
        	set_transmit_mode_uart2();
 80012e0:	f000 f90c 	bl	80014fc <set_transmit_mode_uart2>
   	        HAL_UART_Transmit(&huart2,&UART_Buffer[Write-tocopy], tocopy, 10);
 80012e4:	f8db 2000 	ldr.w	r2, [fp]
 80012e8:	6831      	ldr	r1, [r6, #0]
 80012ea:	230a      	movs	r3, #10
 80012ec:	1a89      	subs	r1, r1, r2
 80012ee:	4451      	add	r1, sl
 80012f0:	b292      	uxth	r2, r2
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <DMA_IrqHandler_Uart1_Rx+0x1ac>)
 80012f4:	e7ae      	b.n	8001254 <DMA_IrqHandler_Uart1_Rx+0xd8>
 80012f6:	bf00      	nop
 80012f8:	40020008 	.word	0x40020008
 80012fc:	20000034 	.word	0x20000034
 8001300:	40020000 	.word	0x40020000
 8001304:	20000294 	.word	0x20000294
 8001308:	20000040 	.word	0x20000040
 800130c:	2000002c 	.word	0x2000002c
 8001310:	20000038 	.word	0x20000038
 8001314:	08001ad8 	.word	0x08001ad8
 8001318:	20000254 	.word	0x20000254
 800131c:	08001ae6 	.word	0x08001ae6
 8001320:	2000002e 	.word	0x2000002e
 8001324:	200000cc 	.word	0x200000cc
 8001328:	20000394 	.word	0x20000394
 800132c:	2000003c 	.word	0x2000003c

08001330 <USART_IrqHandler_Uart_1>:
	if (huart->Instance->SR & UART_FLAG_IDLE)           /* if Idle flag is set */
 8001330:	6803      	ldr	r3, [r0, #0]
{
 8001332:	b507      	push	{r0, r1, r2, lr}
 8001334:	460a      	mov	r2, r1
	if (huart->Instance->SR & UART_FLAG_IDLE)           /* if Idle flag is set */
 8001336:	6819      	ldr	r1, [r3, #0]
 8001338:	06c9      	lsls	r1, r1, #27
 800133a:	d50c      	bpl.n	8001356 <USART_IrqHandler_Uart_1+0x26>
        tmp = huart->Instance->SR;                       /* Read status register */
 800133c:	6819      	ldr	r1, [r3, #0]
 800133e:	9101      	str	r1, [sp, #4]
        tmp = huart->Instance->DR;                       /* Read data register */
 8001340:	685b      	ldr	r3, [r3, #4]
    __HAL_DMA_DISABLE (hdma);       /* Disabling DMA will force transfer complete interrupt if enabled */
 8001342:	6811      	ldr	r1, [r2, #0]
        tmp = huart->Instance->DR;                       /* Read data register */
 8001344:	9301      	str	r3, [sp, #4]
    __HAL_DMA_DISABLE (hdma);       /* Disabling DMA will force transfer complete interrupt if enabled */
 8001346:	680b      	ldr	r3, [r1, #0]
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	600b      	str	r3, [r1, #0]
    DMA_IrqHandler_Uart1_Rx(hdma, huart);
 800134e:	4601      	mov	r1, r0
 8001350:	4610      	mov	r0, r2
 8001352:	f7ff ff13 	bl	800117c <DMA_IrqHandler_Uart1_Rx>
}
 8001356:	b003      	add	sp, #12
 8001358:	f85d fb04 	ldr.w	pc, [sp], #4

0800135c <DMA_IrqHandler_Uart2_Rx>:
		__IO uint32_t IFCR;  /*!< DMA interrupt flag clear register */
	} DMA_Base_Registers;

	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->DmaBaseAddress;
	
	if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)   // if the source is TC
 800135c:	6803      	ldr	r3, [r0, #0]
{
 800135e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)   // if the source is TC
 8001362:	681a      	ldr	r2, [r3, #0]
{
 8001364:	4680      	mov	r8, r0
	if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)   // if the source is TC
 8001366:	0792      	lsls	r2, r2, #30
 8001368:	d57c      	bpl.n	8001464 <DMA_IrqHandler_Uart2_Rx+0x108>
	{
		/* Clear the transfer complete flag */
//    regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800136a:	4a46      	ldr	r2, [pc, #280]	; (8001484 <DMA_IrqHandler_Uart2_Rx+0x128>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d07c      	beq.n	800146a <DMA_IrqHandler_Uart2_Rx+0x10e>
 8001370:	3214      	adds	r2, #20
 8001372:	4293      	cmp	r3, r2
 8001374:	d07b      	beq.n	800146e <DMA_IrqHandler_Uart2_Rx+0x112>
 8001376:	3214      	adds	r2, #20
 8001378:	4293      	cmp	r3, r2
 800137a:	d07a      	beq.n	8001472 <DMA_IrqHandler_Uart2_Rx+0x116>
 800137c:	3214      	adds	r2, #20
 800137e:	4293      	cmp	r3, r2
 8001380:	d07a      	beq.n	8001478 <DMA_IrqHandler_Uart2_Rx+0x11c>
 8001382:	3214      	adds	r2, #20
 8001384:	4293      	cmp	r3, r2
 8001386:	d07a      	beq.n	800147e <DMA_IrqHandler_Uart2_Rx+0x122>
 8001388:	3214      	adds	r2, #20
 800138a:	4293      	cmp	r3, r2
 800138c:	bf0c      	ite	eq
 800138e:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8001392:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->DmaBaseAddress;
 8001396:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
	  
	     /* Get the length of the data */
	  len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;  
	  
	  /* Get number of bytes we can copy to the end of buffer */
	  tocopy = UART_BUFFER_SIZE - Write;      
 800139a:	f8df b108 	ldr.w	fp, [pc, #264]	; 80014a4 <DMA_IrqHandler_Uart2_Rx+0x148>
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->DmaBaseAddress;
 800139e:	9100      	str	r1, [sp, #0]
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013a0:	4939      	ldr	r1, [pc, #228]	; (8001488 <DMA_IrqHandler_Uart2_Rx+0x12c>)
	  tocopy = UART_BUFFER_SIZE - Write;      
 80013a2:	f8db 7000 	ldr.w	r7, [fp]
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013a6:	604a      	str	r2, [r1, #4]
	  len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;  
 80013a8:	685d      	ldr	r5, [r3, #4]
	  tocopy = UART_BUFFER_SIZE - Write;      
 80013aa:	f5c7 7480 	rsb	r4, r7, #256	; 0x100
	  len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;  
 80013ae:	f5c5 7580 	rsb	r5, r5, #256	; 0x100
	  tocopy = UART_BUFFER_SIZE - Write;      
 80013b2:	42ac      	cmp	r4, r5
 80013b4:	bf28      	it	cs
 80013b6:	462c      	movcs	r4, r5
	  len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;  
 80013b8:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 80014a8 <DMA_IrqHandler_Uart2_Rx+0x14c>
      tocopy = len;
    }
		
		 /* Write received data for UART main buffer for manipulation later */
        ptr = DMA_RX_Buffer;
        memcpy(&UART_Buffer[Write], ptr, tocopy);   /* Copy first part */
 80013bc:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80014ac <DMA_IrqHandler_Uart2_Rx+0x150>
 80013c0:	4e32      	ldr	r6, [pc, #200]	; (800148c <DMA_IrqHandler_Uart2_Rx+0x130>)
 80013c2:	4b33      	ldr	r3, [pc, #204]	; (8001490 <DMA_IrqHandler_Uart2_Rx+0x134>)
 80013c4:	4622      	mov	r2, r4
 80013c6:	4631      	mov	r1, r6
	  len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;  
 80013c8:	f8ca 5000 	str.w	r5, [sl]
        memcpy(&UART_Buffer[Write], ptr, tocopy);   /* Copy first part */
 80013cc:	eb09 0007 	add.w	r0, r9, r7
				
		/* Correct values for remaining data */
        Write += tocopy;
        len -= tocopy;
 80013d0:	1b2d      	subs	r5, r5, r4
	  tocopy = UART_BUFFER_SIZE - Write;      
 80013d2:	601c      	str	r4, [r3, #0]
 80013d4:	9301      	str	r3, [sp, #4]
        memcpy(&UART_Buffer[Write], ptr, tocopy);   /* Copy first part */
 80013d6:	f000 fb57 	bl	8001a88 <memcpy>
        len -= tocopy;
 80013da:	f8ca 5000 	str.w	r5, [sl]
        ptr += tocopy;
 80013de:	4d2d      	ldr	r5, [pc, #180]	; (8001494 <DMA_IrqHandler_Uart2_Rx+0x138>)
        Write += tocopy;
 80013e0:	4427      	add	r7, r4
        ptr += tocopy;
 80013e2:	4434      	add	r4, r6
 80013e4:	602c      	str	r4, [r5, #0]
        Write += tocopy;
 80013e6:	f8cb 7000 	str.w	r7, [fp]

		/* UNCOMMENT BELOW TO transmit the data via uart */
        set_transmit_mode_uart1();
 80013ea:	f000 f877 	bl	80014dc <set_transmit_mode_uart1>
        HAL_UART_Transmit(&huart1, &UART_Buffer[Write-tocopy], tocopy, 10);
 80013ee:	9b01      	ldr	r3, [sp, #4]
 80013f0:	f8db 1000 	ldr.w	r1, [fp]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4828      	ldr	r0, [pc, #160]	; (8001498 <DMA_IrqHandler_Uart2_Rx+0x13c>)
 80013f8:	1a89      	subs	r1, r1, r2
 80013fa:	230a      	movs	r3, #10
 80013fc:	b292      	uxth	r2, r2
 80013fe:	4449      	add	r1, r9
 8001400:	f7ff fcd0 	bl	8000da4 <HAL_UART_Transmit>
        set_receive_mode_uart2();
 8001404:	f000 f882 	bl	800150c <set_receive_mode_uart2>
		set_receive_mode_uart1();
 8001408:	f000 f870 	bl	80014ec <set_receive_mode_uart1>

		
		check_value = check_for ("pinku");
 800140c:	4823      	ldr	r0, [pc, #140]	; (800149c <DMA_IrqHandler_Uart2_Rx+0x140>)
 800140e:	f7ff fe9f 	bl	8001150 <check_for>
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <DMA_IrqHandler_Uart2_Rx+0x144>)
		
		/* If still data to write for beginning of buffer */
        if (len) 
 8001414:	f8da 4000 	ldr.w	r4, [sl]
		check_value = check_for ("pinku");
 8001418:	7018      	strb	r0, [r3, #0]
        if (len) 
 800141a:	b19c      	cbz	r4, 8001444 <DMA_IrqHandler_Uart2_Rx+0xe8>
				{
            memcpy(&UART_Buffer[0], ptr, len);      /* Don't care if we override Read pointer now */
 800141c:	4622      	mov	r2, r4
 800141e:	6829      	ldr	r1, [r5, #0]
 8001420:	4648      	mov	r0, r9
 8001422:	f000 fb31 	bl	8001a88 <memcpy>
            Write = len;
 8001426:	f8cb 4000 	str.w	r4, [fp]
			
						/* UNCOMMENT BELOW TO transmit the data via uart */
            			set_transmit_mode_uart1();
 800142a:	f000 f857 	bl	80014dc <set_transmit_mode_uart1>
						HAL_UART_Transmit(&huart1, UART_Buffer, len, 10);  // transmit the remaining data
 800142e:	230a      	movs	r3, #10
 8001430:	f8ba 2000 	ldrh.w	r2, [sl]
 8001434:	4649      	mov	r1, r9
 8001436:	4818      	ldr	r0, [pc, #96]	; (8001498 <DMA_IrqHandler_Uart2_Rx+0x13c>)
 8001438:	f7ff fcb4 	bl	8000da4 <HAL_UART_Transmit>
						set_receive_mode_uart2();
 800143c:	f000 f866 	bl	800150c <set_receive_mode_uart2>
						set_receive_mode_uart1();
 8001440:	f000 f854 	bl	80014ec <set_receive_mode_uart1>
        }
		
		/* Prepare DMA for next transfer */
        /* Important! DMA stream won't start if all flags are not cleared first */
 
        regs->IFCR = 0x3FU << hdma->ChannelIndex; // clear all interrupts
 8001444:	233f      	movs	r3, #63	; 0x3f
 8001446:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800144a:	4093      	lsls	r3, r2
 800144c:	9a00      	ldr	r2, [sp, #0]
 800144e:	6093      	str	r3, [r2, #8]
				hdma->Instance->CMAR = (uint32_t)DMA_RX_Buffer;   /* Set memory address for DMA again */
        hdma->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 8001450:	f44f 7280 	mov.w	r2, #256	; 0x100
				hdma->Instance->CMAR = (uint32_t)DMA_RX_Buffer;   /* Set memory address for DMA again */
 8001454:	f8d8 3000 	ldr.w	r3, [r8]
 8001458:	60de      	str	r6, [r3, #12]
        hdma->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 800145a:	605a      	str	r2, [r3, #4]
        hdma->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	601a      	str	r2, [r3, #0]
	}
}
 8001464:	b003      	add	sp, #12
 8001466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800146a:	2202      	movs	r2, #2
 800146c:	e793      	b.n	8001396 <DMA_IrqHandler_Uart2_Rx+0x3a>
 800146e:	2220      	movs	r2, #32
 8001470:	e791      	b.n	8001396 <DMA_IrqHandler_Uart2_Rx+0x3a>
 8001472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001476:	e78e      	b.n	8001396 <DMA_IrqHandler_Uart2_Rx+0x3a>
 8001478:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800147c:	e78b      	b.n	8001396 <DMA_IrqHandler_Uart2_Rx+0x3a>
 800147e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001482:	e788      	b.n	8001396 <DMA_IrqHandler_Uart2_Rx+0x3a>
 8001484:	40020008 	.word	0x40020008
 8001488:	40020000 	.word	0x40020000
 800148c:	20000294 	.word	0x20000294
 8001490:	2000003c 	.word	0x2000003c
 8001494:	20000038 	.word	0x20000038
 8001498:	20000254 	.word	0x20000254
 800149c:	08001ae6 	.word	0x08001ae6
 80014a0:	2000002e 	.word	0x2000002e
 80014a4:	20000034 	.word	0x20000034
 80014a8:	20000040 	.word	0x20000040
 80014ac:	200000cc 	.word	0x200000cc

080014b0 <USART_IrqHandler_Uart_2>:
	if (huart->Instance->SR & UART_FLAG_IDLE)           /* if Idle flag is set */
 80014b0:	6803      	ldr	r3, [r0, #0]
{
 80014b2:	b507      	push	{r0, r1, r2, lr}
 80014b4:	460a      	mov	r2, r1
	if (huart->Instance->SR & UART_FLAG_IDLE)           /* if Idle flag is set */
 80014b6:	6819      	ldr	r1, [r3, #0]
 80014b8:	06c9      	lsls	r1, r1, #27
 80014ba:	d50c      	bpl.n	80014d6 <USART_IrqHandler_Uart_2+0x26>
        tmp = huart->Instance->SR;                       /* Read status register */
 80014bc:	6819      	ldr	r1, [r3, #0]
 80014be:	9101      	str	r1, [sp, #4]
        tmp = huart->Instance->DR;                       /* Read data register */
 80014c0:	685b      	ldr	r3, [r3, #4]
    __HAL_DMA_DISABLE (hdma);       /* Disabling DMA will force transfer complete interrupt if enabled */
 80014c2:	6811      	ldr	r1, [r2, #0]
        tmp = huart->Instance->DR;                       /* Read data register */
 80014c4:	9301      	str	r3, [sp, #4]
    __HAL_DMA_DISABLE (hdma);       /* Disabling DMA will force transfer complete interrupt if enabled */
 80014c6:	680b      	ldr	r3, [r1, #0]
 80014c8:	f023 0301 	bic.w	r3, r3, #1
 80014cc:	600b      	str	r3, [r1, #0]
    DMA_IrqHandler_Uart2_Rx(hdma, huart);
 80014ce:	4601      	mov	r1, r0
 80014d0:	4610      	mov	r0, r2
 80014d2:	f7ff ff43 	bl	800135c <DMA_IrqHandler_Uart2_Rx>
}
 80014d6:	b003      	add	sp, #12
 80014d8:	f85d fb04 	ldr.w	pc, [sp], #4

080014dc <set_transmit_mode_uart1>:
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void set_transmit_mode_uart1(void)
{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);  // RS 485 transmit mode
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e2:	4801      	ldr	r0, [pc, #4]	; (80014e8 <set_transmit_mode_uart1+0xc>)
 80014e4:	f7ff b922 	b.w	800072c <HAL_GPIO_WritePin>
 80014e8:	40010c00 	.word	0x40010c00

080014ec <set_receive_mode_uart1>:
}

void set_receive_mode_uart1(void)
{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // RS 485 receive mode
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f2:	4801      	ldr	r0, [pc, #4]	; (80014f8 <set_receive_mode_uart1+0xc>)
 80014f4:	f7ff b91a 	b.w	800072c <HAL_GPIO_WritePin>
 80014f8:	40010c00 	.word	0x40010c00

080014fc <set_transmit_mode_uart2>:
}
void set_transmit_mode_uart2(void)
{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // RS 485 transmit mode
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001502:	4801      	ldr	r0, [pc, #4]	; (8001508 <set_transmit_mode_uart2+0xc>)
 8001504:	f7ff b912 	b.w	800072c <HAL_GPIO_WritePin>
 8001508:	40010c00 	.word	0x40010c00

0800150c <set_receive_mode_uart2>:
}

void set_receive_mode_uart2(void)
{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // RS 485 receive mode
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001512:	4801      	ldr	r0, [pc, #4]	; (8001518 <set_receive_mode_uart2+0xc>)
 8001514:	f7ff b90a 	b.w	800072c <HAL_GPIO_WritePin>
 8001518:	40010c00 	.word	0x40010c00

0800151c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800151c:	b500      	push	{lr}
 800151e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001520:	2228      	movs	r2, #40	; 0x28
 8001522:	2100      	movs	r1, #0
 8001524:	a806      	add	r0, sp, #24
 8001526:	f000 faba 	bl	8001a9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800152a:	2214      	movs	r2, #20
 800152c:	2100      	movs	r1, #0
 800152e:	a801      	add	r0, sp, #4
 8001530:	f000 fab5 	bl	8001a9e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001534:	2302      	movs	r3, #2
 8001536:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001538:	2301      	movs	r3, #1
 800153a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800153c:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001540:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	f7ff f8f9 	bl	8000738 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001546:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001548:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800154a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800154e:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001550:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001552:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001554:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001556:	f7ff fac9 	bl	8000aec <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800155a:	b011      	add	sp, #68	; 0x44
 800155c:	f85d fb04 	ldr.w	pc, [sp], #4

08001560 <main>:
{
 8001560:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4d5d      	ldr	r5, [pc, #372]	; (80016d8 <main+0x178>)
  HAL_Init();
 8001564:	f7fe fe16 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001568:	f7ff ffd8 	bl	800151c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	2210      	movs	r2, #16
 800156e:	2100      	movs	r1, #0
 8001570:	a802      	add	r0, sp, #8
 8001572:	f000 fa94 	bl	8001a9e <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	61ab      	str	r3, [r5, #24]
 8001580:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001582:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001590:	4852      	ldr	r0, [pc, #328]	; (80016dc <main+0x17c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	61ab      	str	r3, [r5, #24]
 8001598:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80015a4:	f7ff f8c2 	bl	800072c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015ac:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2302      	movs	r3, #2
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b4:	270c      	movs	r7, #12
  huart1.Init.BaudRate = 19200;
 80015b6:	f44f 4a96 	mov.w	sl, #19200	; 0x4b00
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80015ba:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  huart1.Init.Parity = UART_PARITY_EVEN;
 80015be:	f44f 6880 	mov.w	r8, #1024	; 0x400
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	a902      	add	r1, sp, #8
 80015c4:	4845      	ldr	r0, [pc, #276]	; (80016dc <main+0x17c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	f7fe ffcd 	bl	8000568 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ce:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80015d0:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	616b      	str	r3, [r5, #20]
 80015d8:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80015da:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80015e2:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015e4:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80015e6:	f7fe fe1d 	bl	8000224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80015ea:	200e      	movs	r0, #14
 80015ec:	f7fe fe4e 	bl	800028c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80015f0:	4622      	mov	r2, r4
 80015f2:	4621      	mov	r1, r4
 80015f4:	200f      	movs	r0, #15
 80015f6:	f7fe fe15 	bl	8000224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015fa:	200f      	movs	r0, #15
 80015fc:	f7fe fe46 	bl	800028c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001600:	4622      	mov	r2, r4
 8001602:	4621      	mov	r1, r4
 8001604:	2010      	movs	r0, #16
 8001606:	f7fe fe0d 	bl	8000224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800160a:	2010      	movs	r0, #16
 800160c:	f7fe fe3e 	bl	800028c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001610:	4622      	mov	r2, r4
 8001612:	4621      	mov	r1, r4
 8001614:	2011      	movs	r0, #17
  huart1.Instance = USART1;
 8001616:	4d32      	ldr	r5, [pc, #200]	; (80016e0 <main+0x180>)
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001618:	f7fe fe04 	bl	8000224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800161c:	2011      	movs	r0, #17
 800161e:	f7fe fe35 	bl	800028c <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 19200;
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <main+0x184>)
  huart2.Instance = USART2;
 8001624:	4e30      	ldr	r6, [pc, #192]	; (80016e8 <main+0x188>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001626:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 19200;
 8001628:	e885 0408 	stmia.w	r5, {r3, sl}
  huart1.Init.StopBits = UART_STOPBITS_1;
 800162c:	60ec      	str	r4, [r5, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800162e:	616f      	str	r7, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001630:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001632:	61ec      	str	r4, [r5, #28]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001634:	f8c5 9008 	str.w	r9, [r5, #8]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001638:	f8c5 8010 	str.w	r8, [r5, #16]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800163c:	f7ff fb84 	bl	8000d48 <HAL_UART_Init>
  huart2.Instance = USART2;
 8001640:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <main+0x18c>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001642:	4630      	mov	r0, r6
  huart2.Init.BaudRate = 19200;
 8001644:	e886 0408 	stmia.w	r6, {r3, sl}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001648:	60f4      	str	r4, [r6, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800164a:	6177      	str	r7, [r6, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164c:	61b4      	str	r4, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800164e:	61f4      	str	r4, [r6, #28]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001650:	f8c6 9008 	str.w	r9, [r6, #8]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001654:	f8c6 8010 	str.w	r8, [r6, #16]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001658:	f7ff fb76 	bl	8000d48 <HAL_UART_Init>
  	  HAL_Delay(1000);
 800165c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001660:	f7fe fdbc 	bl	80001dc <HAL_Delay>
  	 set_transmit_mode_uart1();
 8001664:	f7ff ff3a 	bl	80014dc <set_transmit_mode_uart1>
  	 HAL_UART_Transmit(&huart1, id0pooling,TXID0POLLING,TXTIMEOUT);
 8001668:	4921      	ldr	r1, [pc, #132]	; (80016f0 <main+0x190>)
 800166a:	230a      	movs	r3, #10
 800166c:	2204      	movs	r2, #4
 800166e:	4628      	mov	r0, r5
 8001670:	f7ff fb98 	bl	8000da4 <HAL_UART_Transmit>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);   // enable idle line interrupt
 8001674:	682a      	ldr	r2, [r5, #0]
	__HAL_DMA_ENABLE_IT (&hdma_usart1_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 8001676:	4f1f      	ldr	r7, [pc, #124]	; (80016f4 <main+0x194>)
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);   // enable idle line interrupt
 8001678:	68d3      	ldr	r3, [r2, #12]
	__HAL_DMA_ENABLE_IT (&hdma_usart2_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 800167a:	4c1f      	ldr	r4, [pc, #124]	; (80016f8 <main+0x198>)
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);   // enable idle line interrupt
 800167c:	f043 0310 	orr.w	r3, r3, #16
 8001680:	60d3      	str	r3, [r2, #12]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);   // enable idle line interrupt
 8001682:	6832      	ldr	r2, [r6, #0]
 8001684:	68d3      	ldr	r3, [r2, #12]
 8001686:	f043 0310 	orr.w	r3, r3, #16
 800168a:	60d3      	str	r3, [r2, #12]
	__HAL_DMA_ENABLE_IT (&hdma_usart1_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	6813      	ldr	r3, [r2, #0]
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	6013      	str	r3, [r2, #0]
	__HAL_DMA_ENABLE_IT (&hdma_usart2_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 8001696:	6822      	ldr	r2, [r4, #0]
 8001698:	6813      	ldr	r3, [r2, #0]
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	6013      	str	r3, [r2, #0]
	set_receive_mode_uart1();
 80016a0:	f7ff ff24 	bl	80014ec <set_receive_mode_uart1>
	HAL_UART_Receive_DMA (&huart1, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); //receive
 80016a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a8:	4914      	ldr	r1, [pc, #80]	; (80016fc <main+0x19c>)
 80016aa:	4628      	mov	r0, r5
 80016ac:	f7ff fbd6 	bl	8000e5c <HAL_UART_Receive_DMA>
	set_receive_mode_uart2();
 80016b0:	f7ff ff2c 	bl	800150c <set_receive_mode_uart2>
	HAL_UART_Receive_DMA(&huart2, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE);
 80016b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b8:	4910      	ldr	r1, [pc, #64]	; (80016fc <main+0x19c>)
 80016ba:	4630      	mov	r0, r6
 80016bc:	f7ff fbce 	bl	8000e5c <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT); 	// disable half complete interrupt
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	6813      	ldr	r3, [r2, #0]
 80016c4:	f023 0304 	bic.w	r3, r3, #4
 80016c8:	6013      	str	r3, [r2, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT); 	// disable half complete interrupt
 80016ca:	6822      	ldr	r2, [r4, #0]
 80016cc:	6813      	ldr	r3, [r2, #0]
 80016ce:	f023 0304 	bic.w	r3, r3, #4
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e7fe      	b.n	80016d4 <main+0x174>
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010c00 	.word	0x40010c00
 80016e0:	20000254 	.word	0x20000254
 80016e4:	40013800 	.word	0x40013800
 80016e8:	20000394 	.word	0x20000394
 80016ec:	40004400 	.word	0x40004400
 80016f0:	20000008 	.word	0x20000008
 80016f4:	200001cc 	.word	0x200001cc
 80016f8:	20000044 	.word	0x20000044
 80016fc:	20000294 	.word	0x20000294

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	4770      	bx	lr
	...

08001704 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001704:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_MspInit+0x3c>)
{
 8001706:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001708:	699a      	ldr	r2, [r3, #24]
 800170a:	f042 0201 	orr.w	r2, r2, #1
 800170e:	619a      	str	r2, [r3, #24]
 8001710:	699a      	ldr	r2, [r3, #24]
 8001712:	f002 0201 	and.w	r2, r2, #1
 8001716:	9200      	str	r2, [sp, #0]
 8001718:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	69da      	ldr	r2, [r3, #28]
 800171c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001720:	61da      	str	r2, [r3, #28]
 8001722:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001724:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800172e:	6853      	ldr	r3, [r2, #4]
 8001730:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001738:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173a:	b002      	add	sp, #8
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000

08001748 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	2210      	movs	r2, #16
{
 800174a:	b570      	push	{r4, r5, r6, lr}
 800174c:	4605      	mov	r5, r0
 800174e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	eb0d 0002 	add.w	r0, sp, r2
 8001754:	2100      	movs	r1, #0
 8001756:	f000 f9a2 	bl	8001a9e <memset>
  if(huart->Instance==USART1)
 800175a:	682b      	ldr	r3, [r5, #0]
 800175c:	4a5b      	ldr	r2, [pc, #364]	; (80018cc <HAL_UART_MspInit+0x184>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d15a      	bne.n	8001818 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001762:	4b5b      	ldr	r3, [pc, #364]	; (80018d0 <HAL_UART_MspInit+0x188>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8001766:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	485a      	ldr	r0, [pc, #360]	; (80018d4 <HAL_UART_MspInit+0x18c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800176a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800176e:	619a      	str	r2, [r3, #24]
 8001770:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001772:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001774:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001778:	9200      	str	r2, [sp, #0]
 800177a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800177e:	4c56      	ldr	r4, [pc, #344]	; (80018d8 <HAL_UART_MspInit+0x190>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	f042 0204 	orr.w	r2, r2, #4
 8001784:	619a      	str	r2, [r3, #24]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001794:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f7fe fee3 	bl	8000568 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	484b      	ldr	r0, [pc, #300]	; (80018d4 <HAL_UART_MspInit+0x18c>)
 80017a8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ac:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f7fe feda 	bl	8000568 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80017b4:	4b49      	ldr	r3, [pc, #292]	; (80018dc <HAL_UART_MspInit+0x194>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017b6:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017b8:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017bc:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017be:	60a6      	str	r6, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017c0:	60e3      	str	r3, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017c2:	6126      	str	r6, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c4:	6166      	str	r6, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017c6:	61a6      	str	r6, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017c8:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017ca:	f7fe fd83 	bl	80002d4 <HAL_DMA_Init>
 80017ce:	b108      	cbz	r0, 80017d4 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 80017d0:	f7ff ff96 	bl	8001700 <Error_Handler>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017d4:	f04f 0c10 	mov.w	ip, #16
 80017d8:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <HAL_UART_MspInit+0x198>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80017da:	636c      	str	r4, [r5, #52]	; 0x34
 80017dc:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80017de:	4c41      	ldr	r4, [pc, #260]	; (80018e4 <HAL_UART_MspInit+0x19c>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017e0:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017e2:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e6:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80017e8:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ea:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017ec:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ee:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017f0:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80017f2:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017f4:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80017f6:	f7fe fd6d 	bl	80002d4 <HAL_DMA_Init>
 80017fa:	b108      	cbz	r0, 8001800 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 80017fc:	f7ff ff80 	bl	8001700 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001804:	632c      	str	r4, [r5, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001806:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001808:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800180a:	f7fe fd0b 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800180e:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001810:	f7fe fd3c 	bl	800028c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001814:	b008      	add	sp, #32
 8001816:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 8001818:	4a33      	ldr	r2, [pc, #204]	; (80018e8 <HAL_UART_MspInit+0x1a0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d1fa      	bne.n	8001814 <HAL_UART_MspInit+0xcc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <HAL_UART_MspInit+0x188>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8001822:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	482b      	ldr	r0, [pc, #172]	; (80018d4 <HAL_UART_MspInit+0x18c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001826:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800182a:	61da      	str	r2, [r3, #28]
 800182c:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182e:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001830:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001834:	9202      	str	r2, [sp, #8]
 8001836:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	699a      	ldr	r2, [r3, #24]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800183a:	4c2c      	ldr	r4, [pc, #176]	; (80018ec <HAL_UART_MspInit+0x1a4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	f042 0204 	orr.w	r2, r2, #4
 8001840:	619a      	str	r2, [r3, #24]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	9303      	str	r3, [sp, #12]
 800184a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800184c:	2304      	movs	r3, #4
 800184e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f7fe fe86 	bl	8000568 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800185c:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	481d      	ldr	r0, [pc, #116]	; (80018d4 <HAL_UART_MspInit+0x18c>)
 8001860:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001862:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001864:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f7fe fe7e 	bl	8000568 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_UART_MspInit+0x1a8>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800186e:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001870:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001874:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001876:	60a6      	str	r6, [r4, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001878:	60e3      	str	r3, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800187a:	6126      	str	r6, [r4, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800187c:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800187e:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001880:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001882:	f7fe fd27 	bl	80002d4 <HAL_DMA_Init>
 8001886:	b108      	cbz	r0, 800188c <HAL_UART_MspInit+0x144>
      Error_Handler();
 8001888:	f7ff ff3a 	bl	8001700 <Error_Handler>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800188c:	f04f 0c10 	mov.w	ip, #16
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_UART_MspInit+0x1ac>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001892:	636c      	str	r4, [r5, #52]	; 0x34
 8001894:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001896:	4c18      	ldr	r4, [pc, #96]	; (80018f8 <HAL_UART_MspInit+0x1b0>)
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001898:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800189a:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800189e:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018a0:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a2:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018a4:	60e2      	str	r2, [r4, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018a6:	6123      	str	r3, [r4, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a8:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80018aa:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018ac:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018ae:	f7fe fd11 	bl	80002d4 <HAL_DMA_Init>
 80018b2:	b108      	cbz	r0, 80018b8 <HAL_UART_MspInit+0x170>
      Error_Handler();
 80018b4:	f7ff ff24 	bl	8001700 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80018bc:	632c      	str	r4, [r5, #48]	; 0x30
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018be:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80018c0:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018c2:	f7fe fcaf 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018c6:	2026      	movs	r0, #38	; 0x26
 80018c8:	e7a2      	b.n	8001810 <HAL_UART_MspInit+0xc8>
 80018ca:	bf00      	nop
 80018cc:	40013800 	.word	0x40013800
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010800 	.word	0x40010800
 80018d8:	200001cc 	.word	0x200001cc
 80018dc:	40020058 	.word	0x40020058
 80018e0:	40020044 	.word	0x40020044
 80018e4:	20000088 	.word	0x20000088
 80018e8:	40004400 	.word	0x40004400
 80018ec:	20000044 	.word	0x20000044
 80018f0:	4002006c 	.word	0x4002006c
 80018f4:	40020080 	.word	0x40020080
 80018f8:	20000210 	.word	0x20000210

080018fc <NMI_Handler>:
 80018fc:	4770      	bx	lr

080018fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fe:	e7fe      	b.n	80018fe <HardFault_Handler>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	e7fe      	b.n	8001900 <MemManage_Handler>

08001902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001902:	e7fe      	b.n	8001902 <BusFault_Handler>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	e7fe      	b.n	8001904 <UsageFault_Handler>

08001906 <SVC_Handler>:
 8001906:	4770      	bx	lr

08001908 <DebugMon_Handler>:
 8001908:	4770      	bx	lr

0800190a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190a:	4770      	bx	lr

0800190c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190c:	f7fe bc54 	b.w	80001b8 <HAL_IncTick>

08001910 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001910:	4801      	ldr	r0, [pc, #4]	; (8001918 <DMA1_Channel4_IRQHandler+0x8>)
 8001912:	f7fe bd95 	b.w	8000440 <HAL_DMA_IRQHandler>
 8001916:	bf00      	nop
 8001918:	20000088 	.word	0x20000088

0800191c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800191c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800191e:	4c05      	ldr	r4, [pc, #20]	; (8001934 <DMA1_Channel5_IRQHandler+0x18>)
 8001920:	4620      	mov	r0, r4
 8001922:	f7fe fd8d 	bl	8000440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
	DMA_IrqHandler_Uart1_Rx(&hdma_usart1_rx, &huart1);
 8001926:	4620      	mov	r0, r4
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	DMA_IrqHandler_Uart1_Rx(&hdma_usart1_rx, &huart1);
 800192c:	4902      	ldr	r1, [pc, #8]	; (8001938 <DMA1_Channel5_IRQHandler+0x1c>)
 800192e:	f7ff bc25 	b.w	800117c <DMA_IrqHandler_Uart1_Rx>
 8001932:	bf00      	nop
 8001934:	200001cc 	.word	0x200001cc
 8001938:	20000254 	.word	0x20000254

0800193c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800193c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800193e:	4c05      	ldr	r4, [pc, #20]	; (8001954 <DMA1_Channel6_IRQHandler+0x18>)
 8001940:	4620      	mov	r0, r4
 8001942:	f7fe fd7d 	bl	8000440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  DMA_IrqHandler_Uart2_Rx(&hdma_usart2_rx, &huart2);
 8001946:	4620      	mov	r0, r4
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  DMA_IrqHandler_Uart2_Rx(&hdma_usart2_rx, &huart2);
 800194c:	4902      	ldr	r1, [pc, #8]	; (8001958 <DMA1_Channel6_IRQHandler+0x1c>)
 800194e:	f7ff bd05 	b.w	800135c <DMA_IrqHandler_Uart2_Rx>
 8001952:	bf00      	nop
 8001954:	20000044 	.word	0x20000044
 8001958:	20000394 	.word	0x20000394

0800195c <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800195c:	4801      	ldr	r0, [pc, #4]	; (8001964 <DMA1_Channel7_IRQHandler+0x8>)
 800195e:	f7fe bd6f 	b.w	8000440 <HAL_DMA_IRQHandler>
 8001962:	bf00      	nop
 8001964:	20000210 	.word	0x20000210

08001968 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001968:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800196a:	4c05      	ldr	r4, [pc, #20]	; (8001980 <USART1_IRQHandler+0x18>)
 800196c:	4620      	mov	r0, r4
 800196e:	f7ff fb47 	bl	8001000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	USART_IrqHandler_Uart_1(&huart1, &hdma_usart1_rx);
 8001972:	4620      	mov	r0, r4
  /* USER CODE END USART1_IRQn 1 */
}
 8001974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_IrqHandler_Uart_1(&huart1, &hdma_usart1_rx);
 8001978:	4902      	ldr	r1, [pc, #8]	; (8001984 <USART1_IRQHandler+0x1c>)
 800197a:	f7ff bcd9 	b.w	8001330 <USART_IrqHandler_Uart_1>
 800197e:	bf00      	nop
 8001980:	20000254 	.word	0x20000254
 8001984:	200001cc 	.word	0x200001cc

08001988 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001988:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800198a:	4c05      	ldr	r4, [pc, #20]	; (80019a0 <USART2_IRQHandler+0x18>)
 800198c:	4620      	mov	r0, r4
 800198e:	f7ff fb37 	bl	8001000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	USART_IrqHandler_Uart_2(&huart2, &hdma_usart2_rx);
 8001992:	4620      	mov	r0, r4

  /* USER CODE END USART2_IRQn 1 */
}
 8001994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_IrqHandler_Uart_2(&huart2, &hdma_usart2_rx);
 8001998:	4902      	ldr	r1, [pc, #8]	; (80019a4 <USART2_IRQHandler+0x1c>)
 800199a:	f7ff bd89 	b.w	80014b0 <USART_IrqHandler_Uart_2>
 800199e:	bf00      	nop
 80019a0:	20000394 	.word	0x20000394
 80019a4:	20000044 	.word	0x20000044

080019a8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <SystemInit+0x40>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	f042 0201 	orr.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <SystemInit+0x44>)
 80019b6:	400a      	ands	r2, r1
 80019b8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80019c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019c4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019cc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80019d4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80019d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80019da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80019dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <SystemInit+0x48>)
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	f8ff0000 	.word	0xf8ff0000
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019f6:	e003      	b.n	8001a00 <LoopCopyDataInit>

080019f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80019fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019fe:	3104      	adds	r1, #4

08001a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a00:	480a      	ldr	r0, [pc, #40]	; (8001a2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a08:	d3f6      	bcc.n	80019f8 <CopyDataInit>
  ldr r2, =_sbss
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a0c:	e002      	b.n	8001a14 <LoopFillZerobss>

08001a0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a10:	f842 3b04 	str.w	r3, [r2], #4

08001a14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a18:	d3f9      	bcc.n	8001a0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a1a:	f7ff ffc5 	bl	80019a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f000 f80f 	bl	8001a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a22:	f7ff fd9d 	bl	8001560 <main>
  bx lr
 8001a26:	4770      	bx	lr
  ldr r3, =_sidata
 8001a28:	08001b0c 	.word	0x08001b0c
  ldr r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a30:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001a34:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001a38:	200003d4 	.word	0x200003d4

08001a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a3c:	e7fe      	b.n	8001a3c <ADC1_2_IRQHandler>
	...

08001a40 <__libc_init_array>:
 8001a40:	b570      	push	{r4, r5, r6, lr}
 8001a42:	2500      	movs	r5, #0
 8001a44:	4e0c      	ldr	r6, [pc, #48]	; (8001a78 <__libc_init_array+0x38>)
 8001a46:	4c0d      	ldr	r4, [pc, #52]	; (8001a7c <__libc_init_array+0x3c>)
 8001a48:	1ba4      	subs	r4, r4, r6
 8001a4a:	10a4      	asrs	r4, r4, #2
 8001a4c:	42a5      	cmp	r5, r4
 8001a4e:	d109      	bne.n	8001a64 <__libc_init_array+0x24>
 8001a50:	f000 f82e 	bl	8001ab0 <_init>
 8001a54:	2500      	movs	r5, #0
 8001a56:	4e0a      	ldr	r6, [pc, #40]	; (8001a80 <__libc_init_array+0x40>)
 8001a58:	4c0a      	ldr	r4, [pc, #40]	; (8001a84 <__libc_init_array+0x44>)
 8001a5a:	1ba4      	subs	r4, r4, r6
 8001a5c:	10a4      	asrs	r4, r4, #2
 8001a5e:	42a5      	cmp	r5, r4
 8001a60:	d105      	bne.n	8001a6e <__libc_init_array+0x2e>
 8001a62:	bd70      	pop	{r4, r5, r6, pc}
 8001a64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a68:	4798      	blx	r3
 8001a6a:	3501      	adds	r5, #1
 8001a6c:	e7ee      	b.n	8001a4c <__libc_init_array+0xc>
 8001a6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a72:	4798      	blx	r3
 8001a74:	3501      	adds	r5, #1
 8001a76:	e7f2      	b.n	8001a5e <__libc_init_array+0x1e>
 8001a78:	08001b04 	.word	0x08001b04
 8001a7c:	08001b04 	.word	0x08001b04
 8001a80:	08001b04 	.word	0x08001b04
 8001a84:	08001b08 	.word	0x08001b08

08001a88 <memcpy>:
 8001a88:	b510      	push	{r4, lr}
 8001a8a:	1e43      	subs	r3, r0, #1
 8001a8c:	440a      	add	r2, r1
 8001a8e:	4291      	cmp	r1, r2
 8001a90:	d100      	bne.n	8001a94 <memcpy+0xc>
 8001a92:	bd10      	pop	{r4, pc}
 8001a94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001a9c:	e7f7      	b.n	8001a8e <memcpy+0x6>

08001a9e <memset>:
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4402      	add	r2, r0
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d100      	bne.n	8001aa8 <memset+0xa>
 8001aa6:	4770      	bx	lr
 8001aa8:	f803 1b01 	strb.w	r1, [r3], #1
 8001aac:	e7f9      	b.n	8001aa2 <memset+0x4>
	...

08001ab0 <_init>:
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab2:	bf00      	nop
 8001ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ab6:	bc08      	pop	{r3}
 8001ab8:	469e      	mov	lr, r3
 8001aba:	4770      	bx	lr

08001abc <_fini>:
 8001abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001abe:	bf00      	nop
 8001ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ac2:	bc08      	pop	{r3}
 8001ac4:	469e      	mov	lr, r3
 8001ac6:	4770      	bx	lr
