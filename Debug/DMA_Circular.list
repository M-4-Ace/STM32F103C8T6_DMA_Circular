
DMA_Circular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080017f0  080017f0  000117f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001820  08001820  00011820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001824  08001824  00011824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003c4  2000000c  08001834  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200003d0  08001834  000203d0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000072b6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000018c0  00000000  00000000  000272eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028f0  00000000  00000000  00028bab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005b0  00000000  00000000  0002b4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000808  00000000  00000000  0002ba50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003310  00000000  00000000  0002c258  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001f0c  00000000  00000000  0002f568  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00031474  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000e28  00000000  00000000  000314f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080017d8 	.word	0x080017d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080017d8 	.word	0x080017d8

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f88e 	bl	8000284 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f842 	bl	8000200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f962 	bl	8001474 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000002c 	.word	0x2000002c

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ea:	041b      	lsls	r3, r3, #16
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f8:	60d3      	str	r3, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000202:	b530      	push	{r4, r5, lr}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000210:	2b04      	cmp	r3, #4
 8000212:	bf28      	it	cs
 8000214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021c:	bf98      	it	ls
 800021e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	fa05 f303 	lsl.w	r3, r5, r3
 8000224:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf88      	it	hi
 800022a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000230:	fa05 f404 	lsl.w	r4, r5, r4
 8000234:	3c01      	subs	r4, #1
 8000236:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000238:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	ea42 0201 	orr.w	r2, r2, r1
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	bfa9      	itett	ge
 8000244:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4b06      	ldrlt	r3, [pc, #24]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	b2d2      	uxtbge	r2, r2
 800024c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	bfbb      	ittet	lt
 8000252:	f000 000f 	andlt.w	r0, r0, #15
 8000256:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025c:	541a      	strblt	r2, [r3, r0]
 800025e:	bd30      	pop	{r4, r5, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000268:	2800      	cmp	r0, #0
 800026a:	db08      	blt.n	800027e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800026c:	2301      	movs	r3, #1
 800026e:	0942      	lsrs	r2, r0, #5
 8000270:	f000 001f 	and.w	r0, r0, #31
 8000274:	fa03 f000 	lsl.w	r0, r3, r0
 8000278:	4b01      	ldr	r3, [pc, #4]	; (8000280 <HAL_NVIC_EnableIRQ+0x18>)
 800027a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800027e:	4770      	bx	lr
 8000280:	e000e100 	.word	0xe000e100

08000284 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000284:	3801      	subs	r0, #1
 8000286:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800028a:	d20a      	bcs.n	80002a2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000292:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800029c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e010 	.word	0xe000e010
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80002b0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80002b2:	b330      	cbz	r0, 8000302 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80002b4:	2214      	movs	r2, #20
 80002b6:	6801      	ldr	r1, [r0, #0]
 80002b8:	4b13      	ldr	r3, [pc, #76]	; (8000308 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80002ba:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80002bc:	440b      	add	r3, r1
 80002be:	fbb3 f3f2 	udiv	r3, r3, r2
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80002c6:	4b11      	ldr	r3, [pc, #68]	; (800030c <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80002c8:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80002ca:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80002cc:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80002ce:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 80002d2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80002d4:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80002d6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80002da:	4323      	orrs	r3, r4
 80002dc:	6904      	ldr	r4, [r0, #16]
 80002de:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80002e0:	6944      	ldr	r4, [r0, #20]
 80002e2:	4323      	orrs	r3, r4
 80002e4:	6984      	ldr	r4, [r0, #24]
 80002e6:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80002e8:	69c4      	ldr	r4, [r0, #28]
 80002ea:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80002ec:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80002ee:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80002f0:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80002f2:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80002f4:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80002f8:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80002fa:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 80002fe:	4618      	mov	r0, r3
 8000300:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000302:	2001      	movs	r0, #1
}
 8000304:	bd10      	pop	{r4, pc}
 8000306:	bf00      	nop
 8000308:	bffdfff8 	.word	0xbffdfff8
 800030c:	40020000 	.word	0x40020000

08000310 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000312:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000316:	2c01      	cmp	r4, #1
 8000318:	d035      	beq.n	8000386 <HAL_DMA_Start_IT+0x76>
 800031a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800031c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000320:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000324:	42a5      	cmp	r5, r4
 8000326:	f04f 0600 	mov.w	r6, #0
 800032a:	f04f 0402 	mov.w	r4, #2
 800032e:	d128      	bne.n	8000382 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000330:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000334:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000336:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000338:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800033a:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800033c:	f026 0601 	bic.w	r6, r6, #1
 8000340:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000342:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000344:	40bd      	lsls	r5, r7
 8000346:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000348:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800034a:	6843      	ldr	r3, [r0, #4]
 800034c:	6805      	ldr	r5, [r0, #0]
 800034e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000350:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000352:	bf0b      	itete	eq
 8000354:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000356:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000358:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800035a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800035c:	b14b      	cbz	r3, 8000372 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800035e:	6823      	ldr	r3, [r4, #0]
 8000360:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000364:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000366:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000368:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	602b      	str	r3, [r5, #0]
 8000370:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000372:	6823      	ldr	r3, [r4, #0]
 8000374:	f023 0304 	bic.w	r3, r3, #4
 8000378:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800037a:	6823      	ldr	r3, [r4, #0]
 800037c:	f043 030a 	orr.w	r3, r3, #10
 8000380:	e7f0      	b.n	8000364 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000382:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000386:	2002      	movs	r0, #2
}
 8000388:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800038c <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800038c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000390:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000392:	2b02      	cmp	r3, #2
 8000394:	d003      	beq.n	800039e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000396:	2304      	movs	r3, #4
 8000398:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800039a:	2001      	movs	r0, #1
 800039c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800039e:	6803      	ldr	r3, [r0, #0]
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	f022 020e 	bic.w	r2, r2, #14
 80003a6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	f022 0201 	bic.w	r2, r2, #1
 80003ae:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80003b0:	4a18      	ldr	r2, [pc, #96]	; (8000414 <HAL_DMA_Abort_IT+0x88>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d01f      	beq.n	80003f6 <HAL_DMA_Abort_IT+0x6a>
 80003b6:	3214      	adds	r2, #20
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d01e      	beq.n	80003fa <HAL_DMA_Abort_IT+0x6e>
 80003bc:	3214      	adds	r2, #20
 80003be:	4293      	cmp	r3, r2
 80003c0:	d01d      	beq.n	80003fe <HAL_DMA_Abort_IT+0x72>
 80003c2:	3214      	adds	r2, #20
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d01d      	beq.n	8000404 <HAL_DMA_Abort_IT+0x78>
 80003c8:	3214      	adds	r2, #20
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d01d      	beq.n	800040a <HAL_DMA_Abort_IT+0x7e>
 80003ce:	3214      	adds	r2, #20
 80003d0:	4293      	cmp	r3, r2
 80003d2:	bf0c      	ite	eq
 80003d4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80003d8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80003dc:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80003de:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80003e0:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80003e2:	2301      	movs	r3, #1
 80003e4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80003e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80003ea:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80003ee:	b17b      	cbz	r3, 8000410 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80003f0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80003f2:	4620      	mov	r0, r4
 80003f4:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80003f6:	2301      	movs	r3, #1
 80003f8:	e7f0      	b.n	80003dc <HAL_DMA_Abort_IT+0x50>
 80003fa:	2310      	movs	r3, #16
 80003fc:	e7ee      	b.n	80003dc <HAL_DMA_Abort_IT+0x50>
 80003fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000402:	e7eb      	b.n	80003dc <HAL_DMA_Abort_IT+0x50>
 8000404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000408:	e7e8      	b.n	80003dc <HAL_DMA_Abort_IT+0x50>
 800040a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040e:	e7e5      	b.n	80003dc <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000410:	4618      	mov	r0, r3
}
 8000412:	bd10      	pop	{r4, pc}
 8000414:	40020008 	.word	0x40020008
 8000418:	40020000 	.word	0x40020000

0800041c <HAL_DMA_IRQHandler>:
{
 800041c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800041e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000420:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000422:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000424:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000426:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000428:	4095      	lsls	r5, r2
 800042a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 800042c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800042e:	d032      	beq.n	8000496 <HAL_DMA_IRQHandler+0x7a>
 8000430:	074d      	lsls	r5, r1, #29
 8000432:	d530      	bpl.n	8000496 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000438:	bf5e      	ittt	pl
 800043a:	681a      	ldrpl	r2, [r3, #0]
 800043c:	f022 0204 	bicpl.w	r2, r2, #4
 8000440:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000442:	4a3e      	ldr	r2, [pc, #248]	; (800053c <HAL_DMA_IRQHandler+0x120>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d019      	beq.n	800047c <HAL_DMA_IRQHandler+0x60>
 8000448:	3214      	adds	r2, #20
 800044a:	4293      	cmp	r3, r2
 800044c:	d018      	beq.n	8000480 <HAL_DMA_IRQHandler+0x64>
 800044e:	3214      	adds	r2, #20
 8000450:	4293      	cmp	r3, r2
 8000452:	d017      	beq.n	8000484 <HAL_DMA_IRQHandler+0x68>
 8000454:	3214      	adds	r2, #20
 8000456:	4293      	cmp	r3, r2
 8000458:	d017      	beq.n	800048a <HAL_DMA_IRQHandler+0x6e>
 800045a:	3214      	adds	r2, #20
 800045c:	4293      	cmp	r3, r2
 800045e:	d017      	beq.n	8000490 <HAL_DMA_IRQHandler+0x74>
 8000460:	3214      	adds	r2, #20
 8000462:	4293      	cmp	r3, r2
 8000464:	bf0c      	ite	eq
 8000466:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800046a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800046e:	4a34      	ldr	r2, [pc, #208]	; (8000540 <HAL_DMA_IRQHandler+0x124>)
 8000470:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000472:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000474:	2b00      	cmp	r3, #0
 8000476:	d05e      	beq.n	8000536 <HAL_DMA_IRQHandler+0x11a>
}
 8000478:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800047a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800047c:	2304      	movs	r3, #4
 800047e:	e7f6      	b.n	800046e <HAL_DMA_IRQHandler+0x52>
 8000480:	2340      	movs	r3, #64	; 0x40
 8000482:	e7f4      	b.n	800046e <HAL_DMA_IRQHandler+0x52>
 8000484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000488:	e7f1      	b.n	800046e <HAL_DMA_IRQHandler+0x52>
 800048a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800048e:	e7ee      	b.n	800046e <HAL_DMA_IRQHandler+0x52>
 8000490:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000494:	e7eb      	b.n	800046e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000496:	2502      	movs	r5, #2
 8000498:	4095      	lsls	r5, r2
 800049a:	4225      	tst	r5, r4
 800049c:	d035      	beq.n	800050a <HAL_DMA_IRQHandler+0xee>
 800049e:	078d      	lsls	r5, r1, #30
 80004a0:	d533      	bpl.n	800050a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	0694      	lsls	r4, r2, #26
 80004a6:	d406      	bmi.n	80004b6 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	f022 020a 	bic.w	r2, r2, #10
 80004ae:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80004b0:	2201      	movs	r2, #1
 80004b2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80004b6:	4a21      	ldr	r2, [pc, #132]	; (800053c <HAL_DMA_IRQHandler+0x120>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d019      	beq.n	80004f0 <HAL_DMA_IRQHandler+0xd4>
 80004bc:	3214      	adds	r2, #20
 80004be:	4293      	cmp	r3, r2
 80004c0:	d018      	beq.n	80004f4 <HAL_DMA_IRQHandler+0xd8>
 80004c2:	3214      	adds	r2, #20
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d017      	beq.n	80004f8 <HAL_DMA_IRQHandler+0xdc>
 80004c8:	3214      	adds	r2, #20
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d017      	beq.n	80004fe <HAL_DMA_IRQHandler+0xe2>
 80004ce:	3214      	adds	r2, #20
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d017      	beq.n	8000504 <HAL_DMA_IRQHandler+0xe8>
 80004d4:	3214      	adds	r2, #20
 80004d6:	4293      	cmp	r3, r2
 80004d8:	bf0c      	ite	eq
 80004da:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80004de:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80004e2:	4a17      	ldr	r2, [pc, #92]	; (8000540 <HAL_DMA_IRQHandler+0x124>)
 80004e4:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80004e6:	2300      	movs	r3, #0
 80004e8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80004ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80004ee:	e7c1      	b.n	8000474 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80004f0:	2302      	movs	r3, #2
 80004f2:	e7f6      	b.n	80004e2 <HAL_DMA_IRQHandler+0xc6>
 80004f4:	2320      	movs	r3, #32
 80004f6:	e7f4      	b.n	80004e2 <HAL_DMA_IRQHandler+0xc6>
 80004f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004fc:	e7f1      	b.n	80004e2 <HAL_DMA_IRQHandler+0xc6>
 80004fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000502:	e7ee      	b.n	80004e2 <HAL_DMA_IRQHandler+0xc6>
 8000504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000508:	e7eb      	b.n	80004e2 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800050a:	2508      	movs	r5, #8
 800050c:	4095      	lsls	r5, r2
 800050e:	4225      	tst	r5, r4
 8000510:	d011      	beq.n	8000536 <HAL_DMA_IRQHandler+0x11a>
 8000512:	0709      	lsls	r1, r1, #28
 8000514:	d50f      	bpl.n	8000536 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000516:	6819      	ldr	r1, [r3, #0]
 8000518:	f021 010e 	bic.w	r1, r1, #14
 800051c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800051e:	2301      	movs	r3, #1
 8000520:	fa03 f202 	lsl.w	r2, r3, r2
 8000524:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000526:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000528:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800052c:	2300      	movs	r3, #0
 800052e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000532:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000534:	e79e      	b.n	8000474 <HAL_DMA_IRQHandler+0x58>
}
 8000536:	bc70      	pop	{r4, r5, r6}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40020008 	.word	0x40020008
 8000540:	40020000 	.word	0x40020000

08000544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000548:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800054a:	4626      	mov	r6, r4
 800054c:	4b66      	ldr	r3, [pc, #408]	; (80006e8 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800054e:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80006f8 <HAL_GPIO_Init+0x1b4>
 8000552:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80006fc <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000556:	680a      	ldr	r2, [r1, #0]
 8000558:	fa32 f506 	lsrs.w	r5, r2, r6
 800055c:	d102      	bne.n	8000564 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800055e:	b003      	add	sp, #12
 8000560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000564:	f04f 0801 	mov.w	r8, #1
 8000568:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800056c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000570:	4590      	cmp	r8, r2
 8000572:	d17f      	bne.n	8000674 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000574:	684d      	ldr	r5, [r1, #4]
 8000576:	2d12      	cmp	r5, #18
 8000578:	f000 80aa 	beq.w	80006d0 <HAL_GPIO_Init+0x18c>
 800057c:	f200 8083 	bhi.w	8000686 <HAL_GPIO_Init+0x142>
 8000580:	2d02      	cmp	r5, #2
 8000582:	f000 80a2 	beq.w	80006ca <HAL_GPIO_Init+0x186>
 8000586:	d877      	bhi.n	8000678 <HAL_GPIO_Init+0x134>
 8000588:	2d00      	cmp	r5, #0
 800058a:	f000 8089 	beq.w	80006a0 <HAL_GPIO_Init+0x15c>
 800058e:	2d01      	cmp	r5, #1
 8000590:	f000 8099 	beq.w	80006c6 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000594:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000598:	2aff      	cmp	r2, #255	; 0xff
 800059a:	bf93      	iteet	ls
 800059c:	4682      	movls	sl, r0
 800059e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80005a2:	3d08      	subhi	r5, #8
 80005a4:	f8d0 b000 	ldrls.w	fp, [r0]
 80005a8:	bf92      	itee	ls
 80005aa:	00b5      	lslls	r5, r6, #2
 80005ac:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80005b0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005b2:	fa09 f805 	lsl.w	r8, r9, r5
 80005b6:	ea2b 0808 	bic.w	r8, fp, r8
 80005ba:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005be:	bf88      	it	hi
 80005c0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005c4:	ea48 0505 	orr.w	r5, r8, r5
 80005c8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005cc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80005d0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80005d4:	d04e      	beq.n	8000674 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005d6:	4d45      	ldr	r5, [pc, #276]	; (80006ec <HAL_GPIO_Init+0x1a8>)
 80005d8:	4f44      	ldr	r7, [pc, #272]	; (80006ec <HAL_GPIO_Init+0x1a8>)
 80005da:	69ad      	ldr	r5, [r5, #24]
 80005dc:	f026 0803 	bic.w	r8, r6, #3
 80005e0:	f045 0501 	orr.w	r5, r5, #1
 80005e4:	61bd      	str	r5, [r7, #24]
 80005e6:	69bd      	ldr	r5, [r7, #24]
 80005e8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80005ec:	f005 0501 	and.w	r5, r5, #1
 80005f0:	9501      	str	r5, [sp, #4]
 80005f2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005f6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005fa:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005fc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000600:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000604:	fa09 f90b 	lsl.w	r9, r9, fp
 8000608:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800060c:	4d38      	ldr	r5, [pc, #224]	; (80006f0 <HAL_GPIO_Init+0x1ac>)
 800060e:	42a8      	cmp	r0, r5
 8000610:	d063      	beq.n	80006da <HAL_GPIO_Init+0x196>
 8000612:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000616:	42a8      	cmp	r0, r5
 8000618:	d061      	beq.n	80006de <HAL_GPIO_Init+0x19a>
 800061a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800061e:	42a8      	cmp	r0, r5
 8000620:	d05f      	beq.n	80006e2 <HAL_GPIO_Init+0x19e>
 8000622:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000626:	42a8      	cmp	r0, r5
 8000628:	bf0c      	ite	eq
 800062a:	2503      	moveq	r5, #3
 800062c:	2504      	movne	r5, #4
 800062e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000632:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000636:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800063a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800063c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000640:	bf14      	ite	ne
 8000642:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000644:	4395      	biceq	r5, r2
 8000646:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000648:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800064a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800064e:	bf14      	ite	ne
 8000650:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000652:	4395      	biceq	r5, r2
 8000654:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000656:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000658:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800065c:	bf14      	ite	ne
 800065e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000660:	4395      	biceq	r5, r2
 8000662:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000664:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000666:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800066a:	bf14      	ite	ne
 800066c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800066e:	ea25 0202 	biceq.w	r2, r5, r2
 8000672:	60da      	str	r2, [r3, #12]
	position++;
 8000674:	3601      	adds	r6, #1
 8000676:	e76e      	b.n	8000556 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000678:	2d03      	cmp	r5, #3
 800067a:	d022      	beq.n	80006c2 <HAL_GPIO_Init+0x17e>
 800067c:	2d11      	cmp	r5, #17
 800067e:	d189      	bne.n	8000594 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000680:	68cc      	ldr	r4, [r1, #12]
 8000682:	3404      	adds	r4, #4
          break;
 8000684:	e786      	b.n	8000594 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000686:	4f1b      	ldr	r7, [pc, #108]	; (80006f4 <HAL_GPIO_Init+0x1b0>)
 8000688:	42bd      	cmp	r5, r7
 800068a:	d009      	beq.n	80006a0 <HAL_GPIO_Init+0x15c>
 800068c:	d812      	bhi.n	80006b4 <HAL_GPIO_Init+0x170>
 800068e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000700 <HAL_GPIO_Init+0x1bc>
 8000692:	454d      	cmp	r5, r9
 8000694:	d004      	beq.n	80006a0 <HAL_GPIO_Init+0x15c>
 8000696:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800069a:	454d      	cmp	r5, r9
 800069c:	f47f af7a 	bne.w	8000594 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80006a0:	688c      	ldr	r4, [r1, #8]
 80006a2:	b1c4      	cbz	r4, 80006d6 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80006a4:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80006a6:	bf0c      	ite	eq
 80006a8:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80006ac:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006b0:	2408      	movs	r4, #8
 80006b2:	e76f      	b.n	8000594 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80006b4:	4575      	cmp	r5, lr
 80006b6:	d0f3      	beq.n	80006a0 <HAL_GPIO_Init+0x15c>
 80006b8:	4565      	cmp	r5, ip
 80006ba:	d0f1      	beq.n	80006a0 <HAL_GPIO_Init+0x15c>
 80006bc:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000704 <HAL_GPIO_Init+0x1c0>
 80006c0:	e7eb      	b.n	800069a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80006c2:	2400      	movs	r4, #0
 80006c4:	e766      	b.n	8000594 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80006c6:	68cc      	ldr	r4, [r1, #12]
          break;
 80006c8:	e764      	b.n	8000594 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006ca:	68cc      	ldr	r4, [r1, #12]
 80006cc:	3408      	adds	r4, #8
          break;
 80006ce:	e761      	b.n	8000594 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006d0:	68cc      	ldr	r4, [r1, #12]
 80006d2:	340c      	adds	r4, #12
          break;
 80006d4:	e75e      	b.n	8000594 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80006d6:	2404      	movs	r4, #4
 80006d8:	e75c      	b.n	8000594 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80006da:	2500      	movs	r5, #0
 80006dc:	e7a7      	b.n	800062e <HAL_GPIO_Init+0xea>
 80006de:	2501      	movs	r5, #1
 80006e0:	e7a5      	b.n	800062e <HAL_GPIO_Init+0xea>
 80006e2:	2502      	movs	r5, #2
 80006e4:	e7a3      	b.n	800062e <HAL_GPIO_Init+0xea>
 80006e6:	bf00      	nop
 80006e8:	40010400 	.word	0x40010400
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010800 	.word	0x40010800
 80006f4:	10210000 	.word	0x10210000
 80006f8:	10310000 	.word	0x10310000
 80006fc:	10320000 	.word	0x10320000
 8000700:	10110000 	.word	0x10110000
 8000704:	10220000 	.word	0x10220000

08000708 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000708:	b10a      	cbz	r2, 800070e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800070a:	6101      	str	r1, [r0, #16]
 800070c:	4770      	bx	lr
 800070e:	0409      	lsls	r1, r1, #16
 8000710:	e7fb      	b.n	800070a <HAL_GPIO_WritePin+0x2>
	...

08000714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000714:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000718:	4605      	mov	r5, r0
 800071a:	b908      	cbnz	r0, 8000720 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800071c:	2001      	movs	r0, #1
 800071e:	e03c      	b.n	800079a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000720:	6803      	ldr	r3, [r0, #0]
 8000722:	07db      	lsls	r3, r3, #31
 8000724:	d410      	bmi.n	8000748 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000726:	682b      	ldr	r3, [r5, #0]
 8000728:	079f      	lsls	r7, r3, #30
 800072a:	d45d      	bmi.n	80007e8 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800072c:	682b      	ldr	r3, [r5, #0]
 800072e:	0719      	lsls	r1, r3, #28
 8000730:	f100 8094 	bmi.w	800085c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000734:	682b      	ldr	r3, [r5, #0]
 8000736:	075a      	lsls	r2, r3, #29
 8000738:	f100 80be 	bmi.w	80008b8 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800073c:	69e8      	ldr	r0, [r5, #28]
 800073e:	2800      	cmp	r0, #0
 8000740:	f040 812c 	bne.w	800099c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000744:	2000      	movs	r0, #0
 8000746:	e028      	b.n	800079a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000748:	4c8f      	ldr	r4, [pc, #572]	; (8000988 <HAL_RCC_OscConfig+0x274>)
 800074a:	6863      	ldr	r3, [r4, #4]
 800074c:	f003 030c 	and.w	r3, r3, #12
 8000750:	2b04      	cmp	r3, #4
 8000752:	d007      	beq.n	8000764 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000754:	6863      	ldr	r3, [r4, #4]
 8000756:	f003 030c 	and.w	r3, r3, #12
 800075a:	2b08      	cmp	r3, #8
 800075c:	d109      	bne.n	8000772 <HAL_RCC_OscConfig+0x5e>
 800075e:	6863      	ldr	r3, [r4, #4]
 8000760:	03de      	lsls	r6, r3, #15
 8000762:	d506      	bpl.n	8000772 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000764:	6823      	ldr	r3, [r4, #0]
 8000766:	039c      	lsls	r4, r3, #14
 8000768:	d5dd      	bpl.n	8000726 <HAL_RCC_OscConfig+0x12>
 800076a:	686b      	ldr	r3, [r5, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1da      	bne.n	8000726 <HAL_RCC_OscConfig+0x12>
 8000770:	e7d4      	b.n	800071c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000772:	686b      	ldr	r3, [r5, #4]
 8000774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000778:	d112      	bne.n	80007a0 <HAL_RCC_OscConfig+0x8c>
 800077a:	6823      	ldr	r3, [r4, #0]
 800077c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000780:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000782:	f7ff fd25 	bl	80001d0 <HAL_GetTick>
 8000786:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000788:	6823      	ldr	r3, [r4, #0]
 800078a:	0398      	lsls	r0, r3, #14
 800078c:	d4cb      	bmi.n	8000726 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800078e:	f7ff fd1f 	bl	80001d0 <HAL_GetTick>
 8000792:	1b80      	subs	r0, r0, r6
 8000794:	2864      	cmp	r0, #100	; 0x64
 8000796:	d9f7      	bls.n	8000788 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000798:	2003      	movs	r0, #3
}
 800079a:	b002      	add	sp, #8
 800079c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007a0:	b99b      	cbnz	r3, 80007ca <HAL_RCC_OscConfig+0xb6>
 80007a2:	6823      	ldr	r3, [r4, #0]
 80007a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007a8:	6023      	str	r3, [r4, #0]
 80007aa:	6823      	ldr	r3, [r4, #0]
 80007ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007b2:	f7ff fd0d 	bl	80001d0 <HAL_GetTick>
 80007b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007b8:	6823      	ldr	r3, [r4, #0]
 80007ba:	0399      	lsls	r1, r3, #14
 80007bc:	d5b3      	bpl.n	8000726 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007be:	f7ff fd07 	bl	80001d0 <HAL_GetTick>
 80007c2:	1b80      	subs	r0, r0, r6
 80007c4:	2864      	cmp	r0, #100	; 0x64
 80007c6:	d9f7      	bls.n	80007b8 <HAL_RCC_OscConfig+0xa4>
 80007c8:	e7e6      	b.n	8000798 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	d103      	bne.n	80007da <HAL_RCC_OscConfig+0xc6>
 80007d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d6:	6023      	str	r3, [r4, #0]
 80007d8:	e7cf      	b.n	800077a <HAL_RCC_OscConfig+0x66>
 80007da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007de:	6023      	str	r3, [r4, #0]
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e6:	e7cb      	b.n	8000780 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80007e8:	4c67      	ldr	r4, [pc, #412]	; (8000988 <HAL_RCC_OscConfig+0x274>)
 80007ea:	6863      	ldr	r3, [r4, #4]
 80007ec:	f013 0f0c 	tst.w	r3, #12
 80007f0:	d007      	beq.n	8000802 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80007f2:	6863      	ldr	r3, [r4, #4]
 80007f4:	f003 030c 	and.w	r3, r3, #12
 80007f8:	2b08      	cmp	r3, #8
 80007fa:	d110      	bne.n	800081e <HAL_RCC_OscConfig+0x10a>
 80007fc:	6863      	ldr	r3, [r4, #4]
 80007fe:	03da      	lsls	r2, r3, #15
 8000800:	d40d      	bmi.n	800081e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000802:	6823      	ldr	r3, [r4, #0]
 8000804:	079b      	lsls	r3, r3, #30
 8000806:	d502      	bpl.n	800080e <HAL_RCC_OscConfig+0xfa>
 8000808:	692b      	ldr	r3, [r5, #16]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d186      	bne.n	800071c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800080e:	6823      	ldr	r3, [r4, #0]
 8000810:	696a      	ldr	r2, [r5, #20]
 8000812:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000816:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800081a:	6023      	str	r3, [r4, #0]
 800081c:	e786      	b.n	800072c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800081e:	692a      	ldr	r2, [r5, #16]
 8000820:	4b5a      	ldr	r3, [pc, #360]	; (800098c <HAL_RCC_OscConfig+0x278>)
 8000822:	b16a      	cbz	r2, 8000840 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000828:	f7ff fcd2 	bl	80001d0 <HAL_GetTick>
 800082c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800082e:	6823      	ldr	r3, [r4, #0]
 8000830:	079f      	lsls	r7, r3, #30
 8000832:	d4ec      	bmi.n	800080e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000834:	f7ff fccc 	bl	80001d0 <HAL_GetTick>
 8000838:	1b80      	subs	r0, r0, r6
 800083a:	2802      	cmp	r0, #2
 800083c:	d9f7      	bls.n	800082e <HAL_RCC_OscConfig+0x11a>
 800083e:	e7ab      	b.n	8000798 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000840:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000842:	f7ff fcc5 	bl	80001d0 <HAL_GetTick>
 8000846:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000848:	6823      	ldr	r3, [r4, #0]
 800084a:	0798      	lsls	r0, r3, #30
 800084c:	f57f af6e 	bpl.w	800072c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000850:	f7ff fcbe 	bl	80001d0 <HAL_GetTick>
 8000854:	1b80      	subs	r0, r0, r6
 8000856:	2802      	cmp	r0, #2
 8000858:	d9f6      	bls.n	8000848 <HAL_RCC_OscConfig+0x134>
 800085a:	e79d      	b.n	8000798 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800085c:	69aa      	ldr	r2, [r5, #24]
 800085e:	4c4a      	ldr	r4, [pc, #296]	; (8000988 <HAL_RCC_OscConfig+0x274>)
 8000860:	4b4b      	ldr	r3, [pc, #300]	; (8000990 <HAL_RCC_OscConfig+0x27c>)
 8000862:	b1da      	cbz	r2, 800089c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000864:	2201      	movs	r2, #1
 8000866:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000868:	f7ff fcb2 	bl	80001d0 <HAL_GetTick>
 800086c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800086e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000870:	079b      	lsls	r3, r3, #30
 8000872:	d50d      	bpl.n	8000890 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000874:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000878:	4b46      	ldr	r3, [pc, #280]	; (8000994 <HAL_RCC_OscConfig+0x280>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000880:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000882:	bf00      	nop
  }
  while (Delay --);
 8000884:	9b01      	ldr	r3, [sp, #4]
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	9201      	str	r2, [sp, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1f9      	bne.n	8000882 <HAL_RCC_OscConfig+0x16e>
 800088e:	e751      	b.n	8000734 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000890:	f7ff fc9e 	bl	80001d0 <HAL_GetTick>
 8000894:	1b80      	subs	r0, r0, r6
 8000896:	2802      	cmp	r0, #2
 8000898:	d9e9      	bls.n	800086e <HAL_RCC_OscConfig+0x15a>
 800089a:	e77d      	b.n	8000798 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800089c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800089e:	f7ff fc97 	bl	80001d0 <HAL_GetTick>
 80008a2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008a6:	079f      	lsls	r7, r3, #30
 80008a8:	f57f af44 	bpl.w	8000734 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80008ac:	f7ff fc90 	bl	80001d0 <HAL_GetTick>
 80008b0:	1b80      	subs	r0, r0, r6
 80008b2:	2802      	cmp	r0, #2
 80008b4:	d9f6      	bls.n	80008a4 <HAL_RCC_OscConfig+0x190>
 80008b6:	e76f      	b.n	8000798 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008b8:	4c33      	ldr	r4, [pc, #204]	; (8000988 <HAL_RCC_OscConfig+0x274>)
 80008ba:	69e3      	ldr	r3, [r4, #28]
 80008bc:	00d8      	lsls	r0, r3, #3
 80008be:	d424      	bmi.n	800090a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80008c0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	69e3      	ldr	r3, [r4, #28]
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	61e3      	str	r3, [r4, #28]
 80008ca:	69e3      	ldr	r3, [r4, #28]
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008d4:	4e30      	ldr	r6, [pc, #192]	; (8000998 <HAL_RCC_OscConfig+0x284>)
 80008d6:	6833      	ldr	r3, [r6, #0]
 80008d8:	05d9      	lsls	r1, r3, #23
 80008da:	d518      	bpl.n	800090e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008dc:	68eb      	ldr	r3, [r5, #12]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d126      	bne.n	8000930 <HAL_RCC_OscConfig+0x21c>
 80008e2:	6a23      	ldr	r3, [r4, #32]
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008ea:	f7ff fc71 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80008ee:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80008f2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008f4:	6a23      	ldr	r3, [r4, #32]
 80008f6:	079b      	lsls	r3, r3, #30
 80008f8:	d53f      	bpl.n	800097a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80008fa:	2f00      	cmp	r7, #0
 80008fc:	f43f af1e 	beq.w	800073c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000900:	69e3      	ldr	r3, [r4, #28]
 8000902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000906:	61e3      	str	r3, [r4, #28]
 8000908:	e718      	b.n	800073c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800090a:	2700      	movs	r7, #0
 800090c:	e7e2      	b.n	80008d4 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800090e:	6833      	ldr	r3, [r6, #0]
 8000910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000914:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000916:	f7ff fc5b 	bl	80001d0 <HAL_GetTick>
 800091a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800091c:	6833      	ldr	r3, [r6, #0]
 800091e:	05da      	lsls	r2, r3, #23
 8000920:	d4dc      	bmi.n	80008dc <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000922:	f7ff fc55 	bl	80001d0 <HAL_GetTick>
 8000926:	eba0 0008 	sub.w	r0, r0, r8
 800092a:	2864      	cmp	r0, #100	; 0x64
 800092c:	d9f6      	bls.n	800091c <HAL_RCC_OscConfig+0x208>
 800092e:	e733      	b.n	8000798 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000930:	b9ab      	cbnz	r3, 800095e <HAL_RCC_OscConfig+0x24a>
 8000932:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000934:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000938:	f023 0301 	bic.w	r3, r3, #1
 800093c:	6223      	str	r3, [r4, #32]
 800093e:	6a23      	ldr	r3, [r4, #32]
 8000940:	f023 0304 	bic.w	r3, r3, #4
 8000944:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000946:	f7ff fc43 	bl	80001d0 <HAL_GetTick>
 800094a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800094c:	6a23      	ldr	r3, [r4, #32]
 800094e:	0798      	lsls	r0, r3, #30
 8000950:	d5d3      	bpl.n	80008fa <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000952:	f7ff fc3d 	bl	80001d0 <HAL_GetTick>
 8000956:	1b80      	subs	r0, r0, r6
 8000958:	4540      	cmp	r0, r8
 800095a:	d9f7      	bls.n	800094c <HAL_RCC_OscConfig+0x238>
 800095c:	e71c      	b.n	8000798 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800095e:	2b05      	cmp	r3, #5
 8000960:	6a23      	ldr	r3, [r4, #32]
 8000962:	d103      	bne.n	800096c <HAL_RCC_OscConfig+0x258>
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6223      	str	r3, [r4, #32]
 800096a:	e7ba      	b.n	80008e2 <HAL_RCC_OscConfig+0x1ce>
 800096c:	f023 0301 	bic.w	r3, r3, #1
 8000970:	6223      	str	r3, [r4, #32]
 8000972:	6a23      	ldr	r3, [r4, #32]
 8000974:	f023 0304 	bic.w	r3, r3, #4
 8000978:	e7b6      	b.n	80008e8 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800097a:	f7ff fc29 	bl	80001d0 <HAL_GetTick>
 800097e:	eba0 0008 	sub.w	r0, r0, r8
 8000982:	42b0      	cmp	r0, r6
 8000984:	d9b6      	bls.n	80008f4 <HAL_RCC_OscConfig+0x1e0>
 8000986:	e707      	b.n	8000798 <HAL_RCC_OscConfig+0x84>
 8000988:	40021000 	.word	0x40021000
 800098c:	42420000 	.word	0x42420000
 8000990:	42420480 	.word	0x42420480
 8000994:	20000008 	.word	0x20000008
 8000998:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800099c:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <HAL_RCC_OscConfig+0x334>)
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	461c      	mov	r4, r3
 80009a2:	f002 020c 	and.w	r2, r2, #12
 80009a6:	2a08      	cmp	r2, #8
 80009a8:	d03d      	beq.n	8000a26 <HAL_RCC_OscConfig+0x312>
 80009aa:	2300      	movs	r3, #0
 80009ac:	4e27      	ldr	r6, [pc, #156]	; (8000a4c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009ae:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80009b0:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009b2:	d12b      	bne.n	8000a0c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80009b4:	f7ff fc0c 	bl	80001d0 <HAL_GetTick>
 80009b8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009ba:	6823      	ldr	r3, [r4, #0]
 80009bc:	0199      	lsls	r1, r3, #6
 80009be:	d41f      	bmi.n	8000a00 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80009c0:	6a2b      	ldr	r3, [r5, #32]
 80009c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009c6:	d105      	bne.n	80009d4 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80009c8:	6862      	ldr	r2, [r4, #4]
 80009ca:	68a9      	ldr	r1, [r5, #8]
 80009cc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80009d0:	430a      	orrs	r2, r1
 80009d2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009d4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80009d6:	6862      	ldr	r2, [r4, #4]
 80009d8:	430b      	orrs	r3, r1
 80009da:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80009de:	4313      	orrs	r3, r2
 80009e0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80009e2:	2301      	movs	r3, #1
 80009e4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80009e6:	f7ff fbf3 	bl	80001d0 <HAL_GetTick>
 80009ea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	019a      	lsls	r2, r3, #6
 80009f0:	f53f aea8 	bmi.w	8000744 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80009f4:	f7ff fbec 	bl	80001d0 <HAL_GetTick>
 80009f8:	1b40      	subs	r0, r0, r5
 80009fa:	2802      	cmp	r0, #2
 80009fc:	d9f6      	bls.n	80009ec <HAL_RCC_OscConfig+0x2d8>
 80009fe:	e6cb      	b.n	8000798 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a00:	f7ff fbe6 	bl	80001d0 <HAL_GetTick>
 8000a04:	1bc0      	subs	r0, r0, r7
 8000a06:	2802      	cmp	r0, #2
 8000a08:	d9d7      	bls.n	80009ba <HAL_RCC_OscConfig+0x2a6>
 8000a0a:	e6c5      	b.n	8000798 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000a0c:	f7ff fbe0 	bl	80001d0 <HAL_GetTick>
 8000a10:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a12:	6823      	ldr	r3, [r4, #0]
 8000a14:	019b      	lsls	r3, r3, #6
 8000a16:	f57f ae95 	bpl.w	8000744 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a1a:	f7ff fbd9 	bl	80001d0 <HAL_GetTick>
 8000a1e:	1b40      	subs	r0, r0, r5
 8000a20:	2802      	cmp	r0, #2
 8000a22:	d9f6      	bls.n	8000a12 <HAL_RCC_OscConfig+0x2fe>
 8000a24:	e6b8      	b.n	8000798 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000a26:	2801      	cmp	r0, #1
 8000a28:	f43f aeb7 	beq.w	800079a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000a2c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a2e:	6a2b      	ldr	r3, [r5, #32]
 8000a30:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000a34:	429a      	cmp	r2, r3
 8000a36:	f47f ae71 	bne.w	800071c <HAL_RCC_OscConfig+0x8>
 8000a3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000a3c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000a40:	1ac0      	subs	r0, r0, r3
 8000a42:	bf18      	it	ne
 8000a44:	2001      	movne	r0, #1
 8000a46:	e6a8      	b.n	800079a <HAL_RCC_OscConfig+0x86>
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	42420060 	.word	0x42420060

08000a50 <HAL_RCC_GetSysClockFreq>:
{
 8000a50:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000a54:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a56:	ac02      	add	r4, sp, #8
 8000a58:	f103 0510 	add.w	r5, r3, #16
 8000a5c:	4622      	mov	r2, r4
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	6859      	ldr	r1, [r3, #4]
 8000a62:	3308      	adds	r3, #8
 8000a64:	c203      	stmia	r2!, {r0, r1}
 8000a66:	42ab      	cmp	r3, r5
 8000a68:	4614      	mov	r4, r2
 8000a6a:	d1f7      	bne.n	8000a5c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000a72:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000a74:	4911      	ldr	r1, [pc, #68]	; (8000abc <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a76:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000a7a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a7c:	f003 020c 	and.w	r2, r3, #12
 8000a80:	2a08      	cmp	r2, #8
 8000a82:	d117      	bne.n	8000ab4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a84:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000a88:	a806      	add	r0, sp, #24
 8000a8a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a8c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a8e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a92:	d50c      	bpl.n	8000aae <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a94:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a98:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a9c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a9e:	aa06      	add	r2, sp, #24
 8000aa0:	4413      	add	r3, r2
 8000aa2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000aa6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000aaa:	b007      	add	sp, #28
 8000aac:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <HAL_RCC_GetSysClockFreq+0x74>)
 8000ab0:	4350      	muls	r0, r2
 8000ab2:	e7fa      	b.n	8000aaa <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000ab6:	e7f8      	b.n	8000aaa <HAL_RCC_GetSysClockFreq+0x5a>
 8000ab8:	080017f0 	.word	0x080017f0
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	007a1200 	.word	0x007a1200
 8000ac4:	003d0900 	.word	0x003d0900

08000ac8 <HAL_RCC_ClockConfig>:
{
 8000ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000acc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000ace:	4604      	mov	r4, r0
 8000ad0:	b910      	cbnz	r0, 8000ad8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ad8:	4a45      	ldr	r2, [pc, #276]	; (8000bf0 <HAL_RCC_ClockConfig+0x128>)
 8000ada:	6813      	ldr	r3, [r2, #0]
 8000adc:	f003 0307 	and.w	r3, r3, #7
 8000ae0:	428b      	cmp	r3, r1
 8000ae2:	d329      	bcc.n	8000b38 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ae4:	6821      	ldr	r1, [r4, #0]
 8000ae6:	078e      	lsls	r6, r1, #30
 8000ae8:	d431      	bmi.n	8000b4e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000aea:	07ca      	lsls	r2, r1, #31
 8000aec:	d444      	bmi.n	8000b78 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000aee:	4a40      	ldr	r2, [pc, #256]	; (8000bf0 <HAL_RCC_ClockConfig+0x128>)
 8000af0:	6813      	ldr	r3, [r2, #0]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	429d      	cmp	r5, r3
 8000af8:	d367      	bcc.n	8000bca <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000afa:	6822      	ldr	r2, [r4, #0]
 8000afc:	4d3d      	ldr	r5, [pc, #244]	; (8000bf4 <HAL_RCC_ClockConfig+0x12c>)
 8000afe:	f012 0f04 	tst.w	r2, #4
 8000b02:	d16e      	bne.n	8000be2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b04:	0713      	lsls	r3, r2, #28
 8000b06:	d506      	bpl.n	8000b16 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b08:	686b      	ldr	r3, [r5, #4]
 8000b0a:	6922      	ldr	r2, [r4, #16]
 8000b0c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b10:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b14:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000b16:	f7ff ff9b 	bl	8000a50 <HAL_RCC_GetSysClockFreq>
 8000b1a:	686b      	ldr	r3, [r5, #4]
 8000b1c:	4a36      	ldr	r2, [pc, #216]	; (8000bf8 <HAL_RCC_ClockConfig+0x130>)
 8000b1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b22:	5cd3      	ldrb	r3, [r2, r3]
 8000b24:	40d8      	lsrs	r0, r3
 8000b26:	4b35      	ldr	r3, [pc, #212]	; (8000bfc <HAL_RCC_ClockConfig+0x134>)
 8000b28:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000b2a:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <HAL_RCC_ClockConfig+0x138>)
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	f7ff fb0d 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000b32:	2000      	movs	r0, #0
 8000b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b38:	6813      	ldr	r3, [r2, #0]
 8000b3a:	f023 0307 	bic.w	r3, r3, #7
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b42:	6813      	ldr	r3, [r2, #0]
 8000b44:	f003 0307 	and.w	r3, r3, #7
 8000b48:	4299      	cmp	r1, r3
 8000b4a:	d1c2      	bne.n	8000ad2 <HAL_RCC_ClockConfig+0xa>
 8000b4c:	e7ca      	b.n	8000ae4 <HAL_RCC_ClockConfig+0x1c>
 8000b4e:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b50:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b54:	bf1e      	ittt	ne
 8000b56:	685a      	ldrne	r2, [r3, #4]
 8000b58:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000b5c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b5e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b60:	bf42      	ittt	mi
 8000b62:	685a      	ldrmi	r2, [r3, #4]
 8000b64:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000b68:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	68a0      	ldr	r0, [r4, #8]
 8000b6e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000b72:	4302      	orrs	r2, r0
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	e7b8      	b.n	8000aea <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b78:	6862      	ldr	r2, [r4, #4]
 8000b7a:	4e1e      	ldr	r6, [pc, #120]	; (8000bf4 <HAL_RCC_ClockConfig+0x12c>)
 8000b7c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b7e:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b80:	d11b      	bne.n	8000bba <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b82:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b86:	d0a4      	beq.n	8000ad2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b88:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b8a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b8e:	f023 0303 	bic.w	r3, r3, #3
 8000b92:	4313      	orrs	r3, r2
 8000b94:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000b96:	f7ff fb1b 	bl	80001d0 <HAL_GetTick>
 8000b9a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b9c:	6873      	ldr	r3, [r6, #4]
 8000b9e:	6862      	ldr	r2, [r4, #4]
 8000ba0:	f003 030c 	and.w	r3, r3, #12
 8000ba4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000ba8:	d0a1      	beq.n	8000aee <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000baa:	f7ff fb11 	bl	80001d0 <HAL_GetTick>
 8000bae:	1bc0      	subs	r0, r0, r7
 8000bb0:	4540      	cmp	r0, r8
 8000bb2:	d9f3      	bls.n	8000b9c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000bb4:	2003      	movs	r0, #3
}
 8000bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bba:	2a02      	cmp	r2, #2
 8000bbc:	d102      	bne.n	8000bc4 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bbe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bc2:	e7e0      	b.n	8000b86 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc4:	f013 0f02 	tst.w	r3, #2
 8000bc8:	e7dd      	b.n	8000b86 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bca:	6813      	ldr	r3, [r2, #0]
 8000bcc:	f023 0307 	bic.w	r3, r3, #7
 8000bd0:	432b      	orrs	r3, r5
 8000bd2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bd4:	6813      	ldr	r3, [r2, #0]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	429d      	cmp	r5, r3
 8000bdc:	f47f af79 	bne.w	8000ad2 <HAL_RCC_ClockConfig+0xa>
 8000be0:	e78b      	b.n	8000afa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000be2:	686b      	ldr	r3, [r5, #4]
 8000be4:	68e1      	ldr	r1, [r4, #12]
 8000be6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bea:	430b      	orrs	r3, r1
 8000bec:	606b      	str	r3, [r5, #4]
 8000bee:	e789      	b.n	8000b04 <HAL_RCC_ClockConfig+0x3c>
 8000bf0:	40022000 	.word	0x40022000
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	08001806 	.word	0x08001806
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
 8000c10:	4a03      	ldr	r2, [pc, #12]	; (8000c20 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c12:	6810      	ldr	r0, [r2, #0]
}
 8000c14:	40d8      	lsrs	r0, r3
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	08001816 	.word	0x08001816
 8000c20:	20000008 	.word	0x20000008

08000c24 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000c2e:	5cd3      	ldrb	r3, [r2, r3]
 8000c30:	4a03      	ldr	r2, [pc, #12]	; (8000c40 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000c32:	6810      	ldr	r0, [r2, #0]
}
 8000c34:	40d8      	lsrs	r0, r3
 8000c36:	4770      	bx	lr
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	08001816 	.word	0x08001816
 8000c40:	20000008 	.word	0x20000008

08000c44 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000c44:	6803      	ldr	r3, [r0, #0]
 8000c46:	68da      	ldr	r2, [r3, #12]
 8000c48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000c4c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000c4e:	695a      	ldr	r2, [r3, #20]
 8000c50:	f022 0201 	bic.w	r2, r2, #1
 8000c54:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000c56:	2320      	movs	r3, #32
 8000c58:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000c5c:	4770      	bx	lr
	...

08000c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000c60:	b538      	push	{r3, r4, r5, lr}
 8000c62:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000c64:	6803      	ldr	r3, [r0, #0]
 8000c66:	68c1      	ldr	r1, [r0, #12]
 8000c68:	691a      	ldr	r2, [r3, #16]
 8000c6a:	2419      	movs	r4, #25
 8000c6c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000c70:	430a      	orrs	r2, r1
 8000c72:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c74:	6882      	ldr	r2, [r0, #8]
 8000c76:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000c78:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c7a:	4302      	orrs	r2, r0
 8000c7c:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000c7e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000c82:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c86:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000c8c:	695a      	ldr	r2, [r3, #20]
 8000c8e:	69a9      	ldr	r1, [r5, #24]
 8000c90:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000c94:	430a      	orrs	r2, r1
 8000c96:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <UART_SetConfig+0x70>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d114      	bne.n	8000cc8 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000c9e:	f7ff ffc1 	bl	8000c24 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000ca2:	4360      	muls	r0, r4
 8000ca4:	686c      	ldr	r4, [r5, #4]
 8000ca6:	2264      	movs	r2, #100	; 0x64
 8000ca8:	00a4      	lsls	r4, r4, #2
 8000caa:	fbb0 f0f4 	udiv	r0, r0, r4
 8000cae:	fbb0 f4f2 	udiv	r4, r0, r2
 8000cb2:	fb02 0314 	mls	r3, r2, r4, r0
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	3332      	adds	r3, #50	; 0x32
 8000cba:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cbe:	6829      	ldr	r1, [r5, #0]
 8000cc0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000cc4:	608b      	str	r3, [r1, #8]
 8000cc6:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000cc8:	f7ff ff9c 	bl	8000c04 <HAL_RCC_GetPCLK1Freq>
 8000ccc:	e7e9      	b.n	8000ca2 <UART_SetConfig+0x42>
 8000cce:	bf00      	nop
 8000cd0:	40013800 	.word	0x40013800

08000cd4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	460e      	mov	r6, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000cde:	6821      	ldr	r1, [r4, #0]
 8000ce0:	680b      	ldr	r3, [r1, #0]
 8000ce2:	ea36 0303 	bics.w	r3, r6, r3
 8000ce6:	d101      	bne.n	8000cec <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000ce8:	2000      	movs	r0, #0
}
 8000cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000cec:	1c6b      	adds	r3, r5, #1
 8000cee:	d0f7      	beq.n	8000ce0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000cf0:	b995      	cbnz	r5, 8000d18 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000cf2:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000cf4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000cfc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000cfe:	695a      	ldr	r2, [r3, #20]
 8000d00:	f022 0201 	bic.w	r2, r2, #1
 8000d04:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000d06:	2320      	movs	r3, #32
 8000d08:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000d0c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000d10:	2300      	movs	r3, #0
 8000d12:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d18:	f7ff fa5a 	bl	80001d0 <HAL_GetTick>
 8000d1c:	1bc0      	subs	r0, r0, r7
 8000d1e:	4285      	cmp	r5, r0
 8000d20:	d2dd      	bcs.n	8000cde <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000d22:	e7e6      	b.n	8000cf2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000d24 <HAL_UART_Init>:
{
 8000d24:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000d26:	4604      	mov	r4, r0
 8000d28:	b340      	cbz	r0, 8000d7c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000d2a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000d2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d32:	b91b      	cbnz	r3, 8000d3c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000d34:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000d38:	f000 fbbe 	bl	80014b8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000d3c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000d3e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000d40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000d44:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000d46:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000d48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d4c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000d4e:	f7ff ff87 	bl	8000c60 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d52:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d54:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d56:	691a      	ldr	r2, [r3, #16]
 8000d58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000d5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000d5e:	695a      	ldr	r2, [r3, #20]
 8000d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000d64:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000d66:	68da      	ldr	r2, [r3, #12]
 8000d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d6c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000d6e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d70:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000d72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000d76:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000d7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d7c:	2001      	movs	r0, #1
}
 8000d7e:	bd10      	pop	{r4, pc}

08000d80 <HAL_UART_Transmit>:
{
 8000d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d84:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000d86:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000d8a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8000d8c:	2b20      	cmp	r3, #32
{
 8000d8e:	460d      	mov	r5, r1
 8000d90:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000d92:	d14e      	bne.n	8000e32 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8000d94:	2900      	cmp	r1, #0
 8000d96:	d049      	beq.n	8000e2c <HAL_UART_Transmit+0xac>
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	d047      	beq.n	8000e2c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000d9c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d046      	beq.n	8000e32 <HAL_UART_Transmit+0xb2>
 8000da4:	2301      	movs	r3, #1
 8000da6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000dae:	2321      	movs	r3, #33	; 0x21
 8000db0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000db4:	f7ff fa0c 	bl	80001d0 <HAL_GetTick>
 8000db8:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000dba:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000dbe:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000dc2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	b96b      	cbnz	r3, 8000de4 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4632      	mov	r2, r6
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	4620      	mov	r0, r4
 8000dd0:	f7ff ff80 	bl	8000cd4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000dd4:	b9a8      	cbnz	r0, 8000e02 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000dd6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000dd8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000ddc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000de4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000de6:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000de8:	3b01      	subs	r3, #1
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000dee:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000df0:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000df6:	4620      	mov	r0, r4
 8000df8:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000dfa:	d10e      	bne.n	8000e1a <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000dfc:	f7ff ff6a 	bl	8000cd4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000e00:	b110      	cbz	r0, 8000e08 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000e02:	2003      	movs	r0, #3
 8000e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000e08:	882b      	ldrh	r3, [r5, #0]
 8000e0a:	6822      	ldr	r2, [r4, #0]
 8000e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e10:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000e12:	6923      	ldr	r3, [r4, #16]
 8000e14:	b943      	cbnz	r3, 8000e28 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8000e16:	3502      	adds	r5, #2
 8000e18:	e7d3      	b.n	8000dc2 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e1a:	f7ff ff5b 	bl	8000cd4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d1ef      	bne.n	8000e02 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	782a      	ldrb	r2, [r5, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	3501      	adds	r5, #1
 8000e2a:	e7ca      	b.n	8000dc2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000e32:	2002      	movs	r0, #2
}
 8000e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000e38 <HAL_UART_Receive_DMA>:
{
 8000e38:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8000e3a:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8000e3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8000e40:	2a20      	cmp	r2, #32
{
 8000e42:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8000e44:	d138      	bne.n	8000eb8 <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 8000e46:	2900      	cmp	r1, #0
 8000e48:	d034      	beq.n	8000eb4 <HAL_UART_Receive_DMA+0x7c>
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d032      	beq.n	8000eb4 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8000e4e:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8000e52:	2a01      	cmp	r2, #1
 8000e54:	d030      	beq.n	8000eb8 <HAL_UART_Receive_DMA+0x80>
 8000e56:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e58:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8000e5a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000e5e:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8000e60:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8000e62:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e64:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000e66:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8000e6a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000e6c:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8000e6e:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8000e70:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8000e72:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <HAL_UART_Receive_DMA+0x88>)
    huart->hdmarx->XferAbortCallback = NULL;
 8000e74:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8000e76:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8000e78:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <HAL_UART_Receive_DMA+0x8c>)
 8000e7a:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	1d31      	adds	r1, r6, #4
 8000e80:	f7ff fa46 	bl	8000310 <HAL_DMA_Start_IT>
    return HAL_OK;
 8000e84:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 8000e86:	682b      	ldr	r3, [r5, #0]
 8000e88:	9401      	str	r4, [sp, #4]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	9201      	str	r2, [sp, #4]
 8000e8e:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8000e90:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8000e94:	9201      	str	r2, [sp, #4]
 8000e96:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e9e:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000ea0:	695a      	ldr	r2, [r3, #20]
 8000ea2:	f042 0201 	orr.w	r2, r2, #1
 8000ea6:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000ea8:	695a      	ldr	r2, [r3, #20]
 8000eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000eae:	615a      	str	r2, [r3, #20]
}
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	e7fb      	b.n	8000eb0 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8000eb8:	2002      	movs	r0, #2
 8000eba:	e7f9      	b.n	8000eb0 <HAL_UART_Receive_DMA+0x78>
 8000ebc:	08000ecd 	.word	0x08000ecd
 8000ec0:	08000f83 	.word	0x08000f83
 8000ec4:	08000f8f 	.word	0x08000f8f

08000ec8 <HAL_UART_TxCpltCallback>:
 8000ec8:	4770      	bx	lr

08000eca <HAL_UART_RxCpltCallback>:
 8000eca:	4770      	bx	lr

08000ecc <UART_DMAReceiveCplt>:
{
 8000ecc:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ece:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ed0:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f013 0320 	ands.w	r3, r3, #32
 8000ed8:	d110      	bne.n	8000efc <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8000eda:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8000edc:	6813      	ldr	r3, [r2, #0]
 8000ede:	68d9      	ldr	r1, [r3, #12]
 8000ee0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8000ee4:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000ee6:	6959      	ldr	r1, [r3, #20]
 8000ee8:	f021 0101 	bic.w	r1, r1, #1
 8000eec:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000eee:	6959      	ldr	r1, [r3, #20]
 8000ef0:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000ef4:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8000ef6:	2320      	movs	r3, #32
 8000ef8:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8000efc:	4610      	mov	r0, r2
 8000efe:	f7ff ffe4 	bl	8000eca <HAL_UART_RxCpltCallback>
 8000f02:	bd08      	pop	{r3, pc}

08000f04 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8000f04:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8000f08:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8000f0a:	2b22      	cmp	r3, #34	; 0x22
 8000f0c:	d136      	bne.n	8000f7c <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f0e:	6883      	ldr	r3, [r0, #8]
 8000f10:	6901      	ldr	r1, [r0, #16]
 8000f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f16:	6802      	ldr	r2, [r0, #0]
 8000f18:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000f1a:	d123      	bne.n	8000f64 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000f1c:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8000f1e:	b9e9      	cbnz	r1, 8000f5c <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f24:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8000f28:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8000f2a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8000f2c:	3c01      	subs	r4, #1
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8000f32:	b98c      	cbnz	r4, 8000f58 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000f34:	6803      	ldr	r3, [r0, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	f022 0220 	bic.w	r2, r2, #32
 8000f3c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f44:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000f46:	695a      	ldr	r2, [r3, #20]
 8000f48:	f022 0201 	bic.w	r2, r2, #1
 8000f4c:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8000f4e:	2320      	movs	r3, #32
 8000f50:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8000f54:	f7ff ffb9 	bl	8000eca <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8000f58:	2000      	movs	r0, #0
}
 8000f5a:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	f823 2b01 	strh.w	r2, [r3], #1
 8000f62:	e7e1      	b.n	8000f28 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8000f64:	b921      	cbnz	r1, 8000f70 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000f66:	1c59      	adds	r1, r3, #1
 8000f68:	6852      	ldr	r2, [r2, #4]
 8000f6a:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	e7dc      	b.n	8000f2a <UART_Receive_IT+0x26>
 8000f70:	6852      	ldr	r2, [r2, #4]
 8000f72:	1c59      	adds	r1, r3, #1
 8000f74:	6281      	str	r1, [r0, #40]	; 0x28
 8000f76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f7a:	e7f7      	b.n	8000f6c <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8000f7c:	2002      	movs	r0, #2
 8000f7e:	bd10      	pop	{r4, pc}

08000f80 <HAL_UART_RxHalfCpltCallback>:
 8000f80:	4770      	bx	lr

08000f82 <UART_DMARxHalfCplt>:
{
 8000f82:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8000f84:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000f86:	f7ff fffb 	bl	8000f80 <HAL_UART_RxHalfCpltCallback>
 8000f8a:	bd08      	pop	{r3, pc}

08000f8c <HAL_UART_ErrorCallback>:
 8000f8c:	4770      	bx	lr

08000f8e <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f8e:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8000f90:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8000f92:	680b      	ldr	r3, [r1, #0]
 8000f94:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8000f96:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8000f9a:	2821      	cmp	r0, #33	; 0x21
 8000f9c:	d10a      	bne.n	8000fb4 <UART_DMAError+0x26>
 8000f9e:	0612      	lsls	r2, r2, #24
 8000fa0:	d508      	bpl.n	8000fb4 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000fac:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000fae:	2220      	movs	r2, #32
 8000fb0:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000fb4:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8000fb6:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8000fba:	2a22      	cmp	r2, #34	; 0x22
 8000fbc:	d106      	bne.n	8000fcc <UART_DMAError+0x3e>
 8000fbe:	065b      	lsls	r3, r3, #25
 8000fc0:	d504      	bpl.n	8000fcc <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 8000fc2:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8000fc4:	4608      	mov	r0, r1
    huart->RxXferCount = 0x00U;
 8000fc6:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8000fc8:	f7ff fe3c 	bl	8000c44 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8000fcc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8000fce:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8000fd0:	f043 0310 	orr.w	r3, r3, #16
 8000fd4:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8000fd6:	f7ff ffd9 	bl	8000f8c <HAL_UART_ErrorCallback>
 8000fda:	bd08      	pop	{r3, pc}

08000fdc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000fdc:	6803      	ldr	r3, [r0, #0]
{
 8000fde:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000fe0:	681a      	ldr	r2, [r3, #0]
{
 8000fe2:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8000fe4:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000fe6:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000fe8:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8000fea:	d107      	bne.n	8000ffc <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000fec:	0696      	lsls	r6, r2, #26
 8000fee:	d55a      	bpl.n	80010a6 <HAL_UART_IRQHandler+0xca>
 8000ff0:	068d      	lsls	r5, r1, #26
 8000ff2:	d558      	bpl.n	80010a6 <HAL_UART_IRQHandler+0xca>
}
 8000ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8000ff8:	f7ff bf84 	b.w	8000f04 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8000ffc:	f015 0501 	ands.w	r5, r5, #1
 8001000:	d102      	bne.n	8001008 <HAL_UART_IRQHandler+0x2c>
 8001002:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001006:	d04e      	beq.n	80010a6 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001008:	07d3      	lsls	r3, r2, #31
 800100a:	d505      	bpl.n	8001018 <HAL_UART_IRQHandler+0x3c>
 800100c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800100e:	bf42      	ittt	mi
 8001010:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001012:	f043 0301 	orrmi.w	r3, r3, #1
 8001016:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001018:	0750      	lsls	r0, r2, #29
 800101a:	d504      	bpl.n	8001026 <HAL_UART_IRQHandler+0x4a>
 800101c:	b11d      	cbz	r5, 8001026 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800101e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001026:	0793      	lsls	r3, r2, #30
 8001028:	d504      	bpl.n	8001034 <HAL_UART_IRQHandler+0x58>
 800102a:	b11d      	cbz	r5, 8001034 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800102c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001034:	0716      	lsls	r6, r2, #28
 8001036:	d504      	bpl.n	8001042 <HAL_UART_IRQHandler+0x66>
 8001038:	b11d      	cbz	r5, 8001042 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800103a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001042:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001044:	2b00      	cmp	r3, #0
 8001046:	d066      	beq.n	8001116 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001048:	0695      	lsls	r5, r2, #26
 800104a:	d504      	bpl.n	8001056 <HAL_UART_IRQHandler+0x7a>
 800104c:	0688      	lsls	r0, r1, #26
 800104e:	d502      	bpl.n	8001056 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001050:	4620      	mov	r0, r4
 8001052:	f7ff ff57 	bl	8000f04 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001056:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001058:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800105a:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800105c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800105e:	0711      	lsls	r1, r2, #28
 8001060:	d402      	bmi.n	8001068 <HAL_UART_IRQHandler+0x8c>
 8001062:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001066:	d01a      	beq.n	800109e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001068:	f7ff fdec 	bl	8000c44 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	695a      	ldr	r2, [r3, #20]
 8001070:	0652      	lsls	r2, r2, #25
 8001072:	d510      	bpl.n	8001096 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001074:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001076:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800107c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800107e:	b150      	cbz	r0, 8001096 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <HAL_UART_IRQHandler+0x13c>)
 8001082:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001084:	f7ff f982 	bl	800038c <HAL_DMA_Abort_IT>
 8001088:	2800      	cmp	r0, #0
 800108a:	d044      	beq.n	8001116 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800108c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800108e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001092:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001094:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001096:	4620      	mov	r0, r4
 8001098:	f7ff ff78 	bl	8000f8c <HAL_UART_ErrorCallback>
 800109c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800109e:	f7ff ff75 	bl	8000f8c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010a2:	63e5      	str	r5, [r4, #60]	; 0x3c
 80010a4:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80010a6:	0616      	lsls	r6, r2, #24
 80010a8:	d527      	bpl.n	80010fa <HAL_UART_IRQHandler+0x11e>
 80010aa:	060d      	lsls	r5, r1, #24
 80010ac:	d525      	bpl.n	80010fa <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80010ae:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80010b2:	2a21      	cmp	r2, #33	; 0x21
 80010b4:	d12f      	bne.n	8001116 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010b6:	68a2      	ldr	r2, [r4, #8]
 80010b8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80010bc:	6a22      	ldr	r2, [r4, #32]
 80010be:	d117      	bne.n	80010f0 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80010c0:	8811      	ldrh	r1, [r2, #0]
 80010c2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80010c6:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80010c8:	6921      	ldr	r1, [r4, #16]
 80010ca:	b979      	cbnz	r1, 80010ec <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80010cc:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80010ce:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80010d0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80010d2:	3a01      	subs	r2, #1
 80010d4:	b292      	uxth	r2, r2
 80010d6:	84e2      	strh	r2, [r4, #38]	; 0x26
 80010d8:	b9ea      	cbnz	r2, 8001116 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010e0:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80010ec:	3201      	adds	r2, #1
 80010ee:	e7ee      	b.n	80010ce <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80010f0:	1c51      	adds	r1, r2, #1
 80010f2:	6221      	str	r1, [r4, #32]
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	e7ea      	b.n	80010d0 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80010fa:	0650      	lsls	r0, r2, #25
 80010fc:	d50b      	bpl.n	8001116 <HAL_UART_IRQHandler+0x13a>
 80010fe:	064a      	lsls	r2, r1, #25
 8001100:	d509      	bpl.n	8001116 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001102:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001104:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800110a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800110c:	2320      	movs	r3, #32
 800110e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001112:	f7ff fed9 	bl	8000ec8 <HAL_UART_TxCpltCallback>
 8001116:	bd70      	pop	{r4, r5, r6, pc}
 8001118:	0800111d 	.word	0x0800111d

0800111c <UART_DMAAbortOnError>:
{
 800111c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800111e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001120:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001122:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001124:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001126:	f7ff ff31 	bl	8000f8c <HAL_UART_ErrorCallback>
 800112a:	bd08      	pop	{r3, pc}

0800112c <check_for>:
uint8_t* ptr;

extern uint8_t check_value;

uint8_t check_for (char *string)
{
 800112c:	2200      	movs	r2, #0
	uint16_t so_far = 0;
 800112e:	4613      	mov	r3, r2
{
 8001130:	b530      	push	{r4, r5, lr}
	for (uint16_t i=0; i<DMA_RX_BUFFER_SIZE; i++)
	{
		if (DMA_RX_Buffer[i] == string[so_far])
 8001132:	4908      	ldr	r1, [pc, #32]	; (8001154 <check_for+0x28>)
 8001134:	5c55      	ldrb	r5, [r2, r1]
 8001136:	5cc4      	ldrb	r4, [r0, r3]
 8001138:	42a5      	cmp	r5, r4
 800113a:	d105      	bne.n	8001148 <check_for+0x1c>
		{
			so_far++;
 800113c:	3301      	adds	r3, #1
 800113e:	b29b      	uxth	r3, r3
			if (string[so_far] == 0)
 8001140:	5cc4      	ldrb	r4, [r0, r3]
 8001142:	b90c      	cbnz	r4, 8001148 <check_for+0x1c>
				return so_far;
 8001144:	b2d8      	uxtb	r0, r3
 8001146:	bd30      	pop	{r4, r5, pc}
 8001148:	3201      	adds	r2, #1
	for (uint16_t i=0; i<DMA_RX_BUFFER_SIZE; i++)
 800114a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800114e:	d1f1      	bne.n	8001134 <check_for+0x8>
			
		}
  }
}
 8001150:	bd30      	pop	{r4, r5, pc}
 8001152:	bf00      	nop
 8001154:	20000290 	.word	0x20000290

08001158 <DMA_IrqHandler>:
		__IO uint32_t IFCR;  /*!< DMA interrupt flag clear register */
	} DMA_Base_Registers;

	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->DmaBaseAddress;
	
	if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)   // if the source is TC
 8001158:	6803      	ldr	r3, [r0, #0]
{
 800115a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)   // if the source is TC
 800115e:	681a      	ldr	r2, [r3, #0]
{
 8001160:	4680      	mov	r8, r0
	if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)   // if the source is TC
 8001162:	0792      	lsls	r2, r2, #30
 8001164:	d578      	bpl.n	8001258 <DMA_IrqHandler+0x100>
	{
		/* Clear the transfer complete flag */
//    regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001166:	4a44      	ldr	r2, [pc, #272]	; (8001278 <DMA_IrqHandler+0x120>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d078      	beq.n	800125e <DMA_IrqHandler+0x106>
 800116c:	3214      	adds	r2, #20
 800116e:	4293      	cmp	r3, r2
 8001170:	d077      	beq.n	8001262 <DMA_IrqHandler+0x10a>
 8001172:	3214      	adds	r2, #20
 8001174:	4293      	cmp	r3, r2
 8001176:	d076      	beq.n	8001266 <DMA_IrqHandler+0x10e>
 8001178:	3214      	adds	r2, #20
 800117a:	4293      	cmp	r3, r2
 800117c:	d076      	beq.n	800126c <DMA_IrqHandler+0x114>
 800117e:	3214      	adds	r2, #20
 8001180:	4293      	cmp	r3, r2
 8001182:	d076      	beq.n	8001272 <DMA_IrqHandler+0x11a>
 8001184:	3214      	adds	r2, #20
 8001186:	4293      	cmp	r3, r2
 8001188:	bf0c      	ite	eq
 800118a:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 800118e:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->DmaBaseAddress;
 8001192:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
	  
	     /* Get the length of the data */
	  len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;  
	  
	  /* Get number of bytes we can copy to the end of buffer */
	  tocopy = UART_BUFFER_SIZE - Write;      
 8001196:	f8df b100 	ldr.w	fp, [pc, #256]	; 8001298 <DMA_IrqHandler+0x140>
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->DmaBaseAddress;
 800119a:	9100      	str	r1, [sp, #0]
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800119c:	4937      	ldr	r1, [pc, #220]	; (800127c <DMA_IrqHandler+0x124>)
	  tocopy = UART_BUFFER_SIZE - Write;      
 800119e:	f8db 7000 	ldr.w	r7, [fp]
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011a2:	604a      	str	r2, [r1, #4]
	  len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;  
 80011a4:	685d      	ldr	r5, [r3, #4]
	  tocopy = UART_BUFFER_SIZE - Write;      
 80011a6:	f5c7 7480 	rsb	r4, r7, #256	; 0x100
	  len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;  
 80011aa:	f5c5 7580 	rsb	r5, r5, #256	; 0x100
	  tocopy = UART_BUFFER_SIZE - Write;      
 80011ae:	42ac      	cmp	r4, r5
 80011b0:	bf28      	it	cs
 80011b2:	462c      	movcs	r4, r5
	  len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;  
 80011b4:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800129c <DMA_IrqHandler+0x144>
      tocopy = len;
    }
		
		 /* Write received data for UART main buffer for manipulation later */
        ptr = DMA_RX_Buffer;
        memcpy(&UART_Buffer[Write], ptr, tocopy);   /* Copy first part */
 80011b8:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80012a0 <DMA_IrqHandler+0x148>
 80011bc:	4e30      	ldr	r6, [pc, #192]	; (8001280 <DMA_IrqHandler+0x128>)
 80011be:	4b31      	ldr	r3, [pc, #196]	; (8001284 <DMA_IrqHandler+0x12c>)
 80011c0:	4622      	mov	r2, r4
 80011c2:	4631      	mov	r1, r6
	  len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;  
 80011c4:	f8ca 5000 	str.w	r5, [sl]
        memcpy(&UART_Buffer[Write], ptr, tocopy);   /* Copy first part */
 80011c8:	eb09 0007 	add.w	r0, r9, r7
				
		/* Correct values for remaining data */
        Write += tocopy;
        len -= tocopy;
 80011cc:	1b2d      	subs	r5, r5, r4
	  tocopy = UART_BUFFER_SIZE - Write;      
 80011ce:	601c      	str	r4, [r3, #0]
 80011d0:	9301      	str	r3, [sp, #4]
        memcpy(&UART_Buffer[Write], ptr, tocopy);   /* Copy first part */
 80011d2:	f000 faed 	bl	80017b0 <memcpy>
        len -= tocopy;
 80011d6:	f8ca 5000 	str.w	r5, [sl]
        ptr += tocopy;
 80011da:	4d2b      	ldr	r5, [pc, #172]	; (8001288 <DMA_IrqHandler+0x130>)
        Write += tocopy;
 80011dc:	4427      	add	r7, r4
        ptr += tocopy;
 80011de:	4434      	add	r4, r6
 80011e0:	602c      	str	r4, [r5, #0]
        Write += tocopy;
 80011e2:	f8cb 7000 	str.w	r7, [fp]
		
		/* UNCOMMENT BELOW TO transmit the data via uart */
        set_transmit_mode_uart1();
 80011e6:	f000 f873 	bl	80012d0 <set_transmit_mode_uart1>
        HAL_UART_Transmit(&huart1, &UART_Buffer[Write-tocopy], tocopy, 10);
 80011ea:	9b01      	ldr	r3, [sp, #4]
 80011ec:	f8db 1000 	ldr.w	r1, [fp]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4826      	ldr	r0, [pc, #152]	; (800128c <DMA_IrqHandler+0x134>)
 80011f4:	1a89      	subs	r1, r1, r2
 80011f6:	230a      	movs	r3, #10
 80011f8:	b292      	uxth	r2, r2
 80011fa:	4449      	add	r1, r9
 80011fc:	f7ff fdc0 	bl	8000d80 <HAL_UART_Transmit>
        set_receive_mode_uart1();
 8001200:	f000 f86e 	bl	80012e0 <set_receive_mode_uart1>

		
		check_value = check_for ("pinku");
 8001204:	4822      	ldr	r0, [pc, #136]	; (8001290 <DMA_IrqHandler+0x138>)
 8001206:	f7ff ff91 	bl	800112c <check_for>
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <DMA_IrqHandler+0x13c>)
		
		/* If still data to write for beginning of buffer */
        if (len) 
 800120c:	f8da 4000 	ldr.w	r4, [sl]
		check_value = check_for ("pinku");
 8001210:	7018      	strb	r0, [r3, #0]
        if (len) 
 8001212:	b18c      	cbz	r4, 8001238 <DMA_IrqHandler+0xe0>
				{
            memcpy(&UART_Buffer[0], ptr, len);      /* Don't care if we override Read pointer now */
 8001214:	4622      	mov	r2, r4
 8001216:	6829      	ldr	r1, [r5, #0]
 8001218:	4648      	mov	r0, r9
 800121a:	f000 fac9 	bl	80017b0 <memcpy>
            Write = len;
 800121e:	f8cb 4000 	str.w	r4, [fp]
			
						/* UNCOMMENT BELOW TO transmit the data via uart */
            			set_transmit_mode_uart1();
 8001222:	f000 f855 	bl	80012d0 <set_transmit_mode_uart1>
						HAL_UART_Transmit(&huart1, UART_Buffer, len, 10);  // transmit the remaining data
 8001226:	230a      	movs	r3, #10
 8001228:	f8ba 2000 	ldrh.w	r2, [sl]
 800122c:	4649      	mov	r1, r9
 800122e:	4817      	ldr	r0, [pc, #92]	; (800128c <DMA_IrqHandler+0x134>)
 8001230:	f7ff fda6 	bl	8000d80 <HAL_UART_Transmit>
						set_receive_mode_uart1();
 8001234:	f000 f854 	bl	80012e0 <set_receive_mode_uart1>
        }
		
		/* Prepare DMA for next transfer */
        /* Important! DMA stream won't start if all flags are not cleared first */
 
        regs->IFCR = 0x3FU << hdma->ChannelIndex; // clear all interrupts
 8001238:	233f      	movs	r3, #63	; 0x3f
 800123a:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800123e:	4093      	lsls	r3, r2
 8001240:	9a00      	ldr	r2, [sp, #0]
 8001242:	6093      	str	r3, [r2, #8]
				hdma->Instance->CMAR = (uint32_t)DMA_RX_Buffer;   /* Set memory address for DMA again */
        hdma->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 8001244:	f44f 7280 	mov.w	r2, #256	; 0x100
				hdma->Instance->CMAR = (uint32_t)DMA_RX_Buffer;   /* Set memory address for DMA again */
 8001248:	f8d8 3000 	ldr.w	r3, [r8]
 800124c:	60de      	str	r6, [r3, #12]
        hdma->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 800124e:	605a      	str	r2, [r3, #4]
        hdma->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	601a      	str	r2, [r3, #0]
	}
}
 8001258:	b003      	add	sp, #12
 800125a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800125e:	2202      	movs	r2, #2
 8001260:	e797      	b.n	8001192 <DMA_IrqHandler+0x3a>
 8001262:	2220      	movs	r2, #32
 8001264:	e795      	b.n	8001192 <DMA_IrqHandler+0x3a>
 8001266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800126a:	e792      	b.n	8001192 <DMA_IrqHandler+0x3a>
 800126c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001270:	e78f      	b.n	8001192 <DMA_IrqHandler+0x3a>
 8001272:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001276:	e78c      	b.n	8001192 <DMA_IrqHandler+0x3a>
 8001278:	40020008 	.word	0x40020008
 800127c:	40020000 	.word	0x40020000
 8001280:	20000290 	.word	0x20000290
 8001284:	20000038 	.word	0x20000038
 8001288:	20000034 	.word	0x20000034
 800128c:	20000250 	.word	0x20000250
 8001290:	08001800 	.word	0x08001800
 8001294:	20000028 	.word	0x20000028
 8001298:	20000030 	.word	0x20000030
 800129c:	2000003c 	.word	0x2000003c
 80012a0:	200000c8 	.word	0x200000c8

080012a4 <USART_IrqHandler>:
	if (huart->Instance->SR & UART_FLAG_IDLE)           /* if Idle flag is set */
 80012a4:	6803      	ldr	r3, [r0, #0]
{
 80012a6:	b507      	push	{r0, r1, r2, lr}
 80012a8:	460a      	mov	r2, r1
	if (huart->Instance->SR & UART_FLAG_IDLE)           /* if Idle flag is set */
 80012aa:	6819      	ldr	r1, [r3, #0]
 80012ac:	06c9      	lsls	r1, r1, #27
 80012ae:	d50c      	bpl.n	80012ca <USART_IrqHandler+0x26>
        tmp = huart->Instance->SR;                       /* Read status register */
 80012b0:	6819      	ldr	r1, [r3, #0]
 80012b2:	9101      	str	r1, [sp, #4]
        tmp = huart->Instance->DR;                       /* Read data register */
 80012b4:	685b      	ldr	r3, [r3, #4]
    __HAL_DMA_DISABLE (hdma);       /* Disabling DMA will force transfer complete interrupt if enabled */
 80012b6:	6811      	ldr	r1, [r2, #0]
        tmp = huart->Instance->DR;                       /* Read data register */
 80012b8:	9301      	str	r3, [sp, #4]
    __HAL_DMA_DISABLE (hdma);       /* Disabling DMA will force transfer complete interrupt if enabled */
 80012ba:	680b      	ldr	r3, [r1, #0]
 80012bc:	f023 0301 	bic.w	r3, r3, #1
 80012c0:	600b      	str	r3, [r1, #0]
		DMA_IrqHandler (hdma, huart);
 80012c2:	4601      	mov	r1, r0
 80012c4:	4610      	mov	r0, r2
 80012c6:	f7ff ff47 	bl	8001158 <DMA_IrqHandler>
}
 80012ca:	b003      	add	sp, #12
 80012cc:	f85d fb04 	ldr.w	pc, [sp], #4

080012d0 <set_transmit_mode_uart1>:
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void set_transmit_mode_uart1(void)
{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);  // RS 485 transmit mode
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d6:	4801      	ldr	r0, [pc, #4]	; (80012dc <set_transmit_mode_uart1+0xc>)
 80012d8:	f7ff ba16 	b.w	8000708 <HAL_GPIO_WritePin>
 80012dc:	40010c00 	.word	0x40010c00

080012e0 <set_receive_mode_uart1>:
}

void set_receive_mode_uart1(void)
{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // RS 485 receive mode
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e6:	4801      	ldr	r0, [pc, #4]	; (80012ec <set_receive_mode_uart1+0xc>)
 80012e8:	f7ff ba0e 	b.w	8000708 <HAL_GPIO_WritePin>
 80012ec:	40010c00 	.word	0x40010c00

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b500      	push	{lr}
 80012f2:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f4:	2228      	movs	r2, #40	; 0x28
 80012f6:	2100      	movs	r1, #0
 80012f8:	a806      	add	r0, sp, #24
 80012fa:	f000 fa64 	bl	80017c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fe:	2214      	movs	r2, #20
 8001300:	2100      	movs	r1, #0
 8001302:	a801      	add	r0, sp, #4
 8001304:	f000 fa5f 	bl	80017c6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001308:	2302      	movs	r3, #2
 800130a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130c:	2301      	movs	r3, #1
 800130e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001310:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001312:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001314:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001316:	f7ff f9fd 	bl	8000714 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800131a:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800131e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001320:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001322:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001324:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001326:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001328:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800132a:	f7ff fbcd 	bl	8000ac8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800132e:	b011      	add	sp, #68	; 0x44
 8001330:	f85d fb04 	ldr.w	pc, [sp], #4

08001334 <main>:
{
 8001334:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4d46      	ldr	r5, [pc, #280]	; (8001450 <main+0x11c>)
  HAL_Init();
 8001338:	f7fe ff2c 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 800133c:	f7ff ffd8 	bl	80012f0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	2210      	movs	r2, #16
 8001342:	2100      	movs	r1, #0
 8001344:	a802      	add	r0, sp, #8
 8001346:	f000 fa3e 	bl	80017c6 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	61ab      	str	r3, [r5, #24]
 8001354:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001356:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001364:	483b      	ldr	r0, [pc, #236]	; (8001454 <main+0x120>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	61ab      	str	r3, [r5, #24]
 800136c:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001378:	f7ff f9c6 	bl	8000708 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800137c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001380:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2302      	movs	r3, #2
  huart1.Init.BaudRate = 19200;
 8001388:	f44f 4796 	mov.w	r7, #19200	; 0x4b00
  huart1.Init.Mode = UART_MODE_TX_RX;
 800138c:	260c      	movs	r6, #12
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	a902      	add	r1, sp, #8
 8001390:	4830      	ldr	r0, [pc, #192]	; (8001454 <main+0x120>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f7ff f8d5 	bl	8000544 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139a:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800139c:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	616b      	str	r3, [r5, #20]
 80013a4:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80013a6:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80013ae:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013b0:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80013b2:	f7fe ff25 	bl	8000200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80013b6:	200e      	movs	r0, #14
 80013b8:	f7fe ff56 	bl	8000268 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80013bc:	4622      	mov	r2, r4
 80013be:	4621      	mov	r1, r4
 80013c0:	200f      	movs	r0, #15
 80013c2:	f7fe ff1d 	bl	8000200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80013c6:	200f      	movs	r0, #15
 80013c8:	f7fe ff4e 	bl	8000268 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80013cc:	4622      	mov	r2, r4
 80013ce:	4621      	mov	r1, r4
 80013d0:	2010      	movs	r0, #16
 80013d2:	f7fe ff15 	bl	8000200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80013d6:	2010      	movs	r0, #16
 80013d8:	f7fe ff46 	bl	8000268 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80013dc:	4621      	mov	r1, r4
 80013de:	4622      	mov	r2, r4
 80013e0:	2011      	movs	r0, #17
  huart1.Instance = USART1;
 80013e2:	4d1d      	ldr	r5, [pc, #116]	; (8001458 <main+0x124>)
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80013e4:	f7fe ff0c 	bl	8000200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80013e8:	2011      	movs	r0, #17
 80013ea:	f7fe ff3d 	bl	8000268 <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 19200;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <main+0x128>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013f0:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 19200;
 80013f2:	e885 0088 	stmia.w	r5, {r3, r7}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	60ac      	str	r4, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f8:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013fa:	612c      	str	r4, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fc:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fe:	61ec      	str	r4, [r5, #28]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001400:	616e      	str	r6, [r5, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001402:	f7ff fc8f 	bl	8000d24 <HAL_UART_Init>
  huart2.Instance = USART2;
 8001406:	4816      	ldr	r0, [pc, #88]	; (8001460 <main+0x12c>)
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <main+0x130>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 19200;
 800140c:	e880 0088 	stmia.w	r0, {r3, r7}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001410:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001412:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001414:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001416:	61c4      	str	r4, [r0, #28]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001418:	6146      	str	r6, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141a:	f7ff fc83 	bl	8000d24 <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);   // enable idle line interrupt
 800141e:	682a      	ldr	r2, [r5, #0]
	__HAL_DMA_ENABLE_IT (&hdma_usart1_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 8001420:	4c11      	ldr	r4, [pc, #68]	; (8001468 <main+0x134>)
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);   // enable idle line interrupt
 8001422:	68d3      	ldr	r3, [r2, #12]
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	60d3      	str	r3, [r2, #12]
	__HAL_DMA_ENABLE_IT (&hdma_usart1_rx, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 800142a:	6822      	ldr	r2, [r4, #0]
 800142c:	6813      	ldr	r3, [r2, #0]
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	6013      	str	r3, [r2, #0]
	set_receive_mode_uart1();
 8001434:	f7ff ff54 	bl	80012e0 <set_receive_mode_uart1>
	HAL_UART_Receive_DMA (&huart1, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE);
 8001438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800143c:	490b      	ldr	r1, [pc, #44]	; (800146c <main+0x138>)
 800143e:	4628      	mov	r0, r5
 8001440:	f7ff fcfa 	bl	8000e38 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT); 	// disable half complete interrupt
 8001444:	6822      	ldr	r2, [r4, #0]
 8001446:	6813      	ldr	r3, [r2, #0]
 8001448:	f023 0304 	bic.w	r3, r3, #4
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e7fe      	b.n	800144e <main+0x11a>
 8001450:	40021000 	.word	0x40021000
 8001454:	40010c00 	.word	0x40010c00
 8001458:	20000250 	.word	0x20000250
 800145c:	40013800 	.word	0x40013800
 8001460:	20000390 	.word	0x20000390
 8001464:	40004400 	.word	0x40004400
 8001468:	200001c8 	.word	0x200001c8
 800146c:	20000290 	.word	0x20000290

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	4770      	bx	lr
	...

08001474 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_MspInit+0x3c>)
{
 8001476:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001478:	699a      	ldr	r2, [r3, #24]
 800147a:	f042 0201 	orr.w	r2, r2, #1
 800147e:	619a      	str	r2, [r3, #24]
 8001480:	699a      	ldr	r2, [r3, #24]
 8001482:	f002 0201 	and.w	r2, r2, #1
 8001486:	9200      	str	r2, [sp, #0]
 8001488:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	69da      	ldr	r2, [r3, #28]
 800148c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001490:	61da      	str	r2, [r3, #28]
 8001492:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800149e:	6853      	ldr	r3, [r2, #4]
 80014a0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	b002      	add	sp, #8
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010000 	.word	0x40010000

080014b8 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	2210      	movs	r2, #16
{
 80014ba:	b570      	push	{r4, r5, r6, lr}
 80014bc:	4605      	mov	r5, r0
 80014be:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	eb0d 0002 	add.w	r0, sp, r2
 80014c4:	2100      	movs	r1, #0
 80014c6:	f000 f97e 	bl	80017c6 <memset>
  if(huart->Instance==USART1)
 80014ca:	682b      	ldr	r3, [r5, #0]
 80014cc:	4a5b      	ldr	r2, [pc, #364]	; (800163c <HAL_UART_MspInit+0x184>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d15a      	bne.n	8001588 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014d2:	4b5b      	ldr	r3, [pc, #364]	; (8001640 <HAL_UART_MspInit+0x188>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 80014d6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	485a      	ldr	r0, [pc, #360]	; (8001644 <HAL_UART_MspInit+0x18c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80014da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014de:	619a      	str	r2, [r3, #24]
 80014e0:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e2:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014e8:	9200      	str	r2, [sp, #0]
 80014ea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80014ee:	4c56      	ldr	r4, [pc, #344]	; (8001648 <HAL_UART_MspInit+0x190>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	f042 0204 	orr.w	r2, r2, #4
 80014f4:	619a      	str	r2, [r3, #24]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001504:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f7ff f819 	bl	8000544 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001512:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	484b      	ldr	r0, [pc, #300]	; (8001644 <HAL_UART_MspInit+0x18c>)
 8001518:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800151a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151c:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f7ff f810 	bl	8000544 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001524:	4b49      	ldr	r3, [pc, #292]	; (800164c <HAL_UART_MspInit+0x194>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001526:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001528:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800152c:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152e:	60a6      	str	r6, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001530:	60e3      	str	r3, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001532:	6126      	str	r6, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001534:	6166      	str	r6, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001536:	61a6      	str	r6, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001538:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800153a:	f7fe feb9 	bl	80002b0 <HAL_DMA_Init>
 800153e:	b108      	cbz	r0, 8001544 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 8001540:	f7ff ff96 	bl	8001470 <Error_Handler>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001544:	f04f 0c10 	mov.w	ip, #16
 8001548:	4b41      	ldr	r3, [pc, #260]	; (8001650 <HAL_UART_MspInit+0x198>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800154a:	636c      	str	r4, [r5, #52]	; 0x34
 800154c:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800154e:	4c41      	ldr	r4, [pc, #260]	; (8001654 <HAL_UART_MspInit+0x19c>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001550:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001552:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001556:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001558:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800155a:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800155c:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800155e:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001560:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001562:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001564:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001566:	f7fe fea3 	bl	80002b0 <HAL_DMA_Init>
 800156a:	b108      	cbz	r0, 8001570 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 800156c:	f7ff ff80 	bl	8001470 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001574:	632c      	str	r4, [r5, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001576:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001578:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800157a:	f7fe fe41 	bl	8000200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800157e:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001580:	f7fe fe72 	bl	8000268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001584:	b008      	add	sp, #32
 8001586:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 8001588:	4a33      	ldr	r2, [pc, #204]	; (8001658 <HAL_UART_MspInit+0x1a0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d1fa      	bne.n	8001584 <HAL_UART_MspInit+0xcc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <HAL_UART_MspInit+0x188>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8001592:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	482b      	ldr	r0, [pc, #172]	; (8001644 <HAL_UART_MspInit+0x18c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001596:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800159a:	61da      	str	r2, [r3, #28]
 800159c:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159e:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80015a4:	9202      	str	r2, [sp, #8]
 80015a6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	699a      	ldr	r2, [r3, #24]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80015aa:	4c2c      	ldr	r4, [pc, #176]	; (800165c <HAL_UART_MspInit+0x1a4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	f042 0204 	orr.w	r2, r2, #4
 80015b0:	619a      	str	r2, [r3, #24]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	9303      	str	r3, [sp, #12]
 80015ba:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015bc:	2304      	movs	r3, #4
 80015be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f7fe ffbc 	bl	8000544 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015cc:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	481d      	ldr	r0, [pc, #116]	; (8001644 <HAL_UART_MspInit+0x18c>)
 80015d0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f7fe ffb4 	bl	8000544 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_UART_MspInit+0x1a8>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015de:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015e0:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015e4:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e6:	60a6      	str	r6, [r4, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015e8:	60e3      	str	r3, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ea:	6126      	str	r6, [r4, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ec:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80015ee:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015f0:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015f2:	f7fe fe5d 	bl	80002b0 <HAL_DMA_Init>
 80015f6:	b108      	cbz	r0, 80015fc <HAL_UART_MspInit+0x144>
      Error_Handler();
 80015f8:	f7ff ff3a 	bl	8001470 <Error_Handler>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015fc:	f04f 0c10 	mov.w	ip, #16
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_UART_MspInit+0x1ac>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001602:	636c      	str	r4, [r5, #52]	; 0x34
 8001604:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001606:	4c18      	ldr	r4, [pc, #96]	; (8001668 <HAL_UART_MspInit+0x1b0>)
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001608:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800160a:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800160e:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001610:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001612:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001614:	60e2      	str	r2, [r4, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001616:	6123      	str	r3, [r4, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001618:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800161a:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800161c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800161e:	f7fe fe47 	bl	80002b0 <HAL_DMA_Init>
 8001622:	b108      	cbz	r0, 8001628 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8001624:	f7ff ff24 	bl	8001470 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800162c:	632c      	str	r4, [r5, #48]	; 0x30
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800162e:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001630:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001632:	f7fe fde5 	bl	8000200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001636:	2026      	movs	r0, #38	; 0x26
 8001638:	e7a2      	b.n	8001580 <HAL_UART_MspInit+0xc8>
 800163a:	bf00      	nop
 800163c:	40013800 	.word	0x40013800
 8001640:	40021000 	.word	0x40021000
 8001644:	40010800 	.word	0x40010800
 8001648:	200001c8 	.word	0x200001c8
 800164c:	40020058 	.word	0x40020058
 8001650:	40020044 	.word	0x40020044
 8001654:	20000084 	.word	0x20000084
 8001658:	40004400 	.word	0x40004400
 800165c:	20000040 	.word	0x20000040
 8001660:	4002006c 	.word	0x4002006c
 8001664:	40020080 	.word	0x40020080
 8001668:	2000020c 	.word	0x2000020c

0800166c <NMI_Handler>:
 800166c:	4770      	bx	lr

0800166e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166e:	e7fe      	b.n	800166e <HardFault_Handler>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	e7fe      	b.n	8001670 <MemManage_Handler>

08001672 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001672:	e7fe      	b.n	8001672 <BusFault_Handler>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler>

08001676 <SVC_Handler>:
 8001676:	4770      	bx	lr

08001678 <DebugMon_Handler>:
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	4770      	bx	lr

0800167c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167c:	f7fe bd9c 	b.w	80001b8 <HAL_IncTick>

08001680 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001680:	4801      	ldr	r0, [pc, #4]	; (8001688 <DMA1_Channel4_IRQHandler+0x8>)
 8001682:	f7fe becb 	b.w	800041c <HAL_DMA_IRQHandler>
 8001686:	bf00      	nop
 8001688:	20000084 	.word	0x20000084

0800168c <DMA1_Channel5_IRQHandler>:

  /* USER CODE END DMA1_Channel5_IRQn 0 */
//  HAL_DMA_IRQHandler(&hdma_usart1_rx);

	/* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
	DMA_IrqHandler(&hdma_usart1_rx, &huart1);
 800168c:	4901      	ldr	r1, [pc, #4]	; (8001694 <DMA1_Channel5_IRQHandler+0x8>)
 800168e:	4802      	ldr	r0, [pc, #8]	; (8001698 <DMA1_Channel5_IRQHandler+0xc>)
 8001690:	f7ff bd62 	b.w	8001158 <DMA_IrqHandler>
 8001694:	20000250 	.word	0x20000250
 8001698:	200001c8 	.word	0x200001c8

0800169c <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800169c:	4801      	ldr	r0, [pc, #4]	; (80016a4 <DMA1_Channel6_IRQHandler+0x8>)
 800169e:	f7fe bebd 	b.w	800041c <HAL_DMA_IRQHandler>
 80016a2:	bf00      	nop
 80016a4:	20000040 	.word	0x20000040

080016a8 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016a8:	4801      	ldr	r0, [pc, #4]	; (80016b0 <DMA1_Channel7_IRQHandler+0x8>)
 80016aa:	f7fe beb7 	b.w	800041c <HAL_DMA_IRQHandler>
 80016ae:	bf00      	nop
 80016b0:	2000020c 	.word	0x2000020c

080016b4 <USART1_IRQHandler>:
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
	USART_IrqHandler(&huart1, &hdma_usart1_rx);
 80016b4:	4901      	ldr	r1, [pc, #4]	; (80016bc <USART1_IRQHandler+0x8>)
 80016b6:	4802      	ldr	r0, [pc, #8]	; (80016c0 <USART1_IRQHandler+0xc>)
 80016b8:	f7ff bdf4 	b.w	80012a4 <USART_IrqHandler>
 80016bc:	200001c8 	.word	0x200001c8
 80016c0:	20000250 	.word	0x20000250

080016c4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016c4:	4801      	ldr	r0, [pc, #4]	; (80016cc <USART2_IRQHandler+0x8>)
 80016c6:	f7ff bc89 	b.w	8000fdc <HAL_UART_IRQHandler>
 80016ca:	bf00      	nop
 80016cc:	20000390 	.word	0x20000390

080016d0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <SystemInit+0x40>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	f042 0201 	orr.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <SystemInit+0x44>)
 80016de:	400a      	ands	r2, r1
 80016e0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80016e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016ec:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016f4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80016fc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80016fe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001702:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001704:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <SystemInit+0x48>)
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	f8ff0000 	.word	0xf8ff0000
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800171c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800171e:	e003      	b.n	8001728 <LoopCopyDataInit>

08001720 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001722:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001724:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001726:	3104      	adds	r1, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001728:	480a      	ldr	r0, [pc, #40]	; (8001754 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800172c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800172e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001730:	d3f6      	bcc.n	8001720 <CopyDataInit>
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001734:	e002      	b.n	800173c <LoopFillZerobss>

08001736 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001738:	f842 3b04 	str.w	r3, [r2], #4

0800173c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800173e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001740:	d3f9      	bcc.n	8001736 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001742:	f7ff ffc5 	bl	80016d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001746:	f000 f80f 	bl	8001768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800174a:	f7ff fdf3 	bl	8001334 <main>
  bx lr
 800174e:	4770      	bx	lr
  ldr r3, =_sidata
 8001750:	08001828 	.word	0x08001828
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001758:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800175c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001760:	200003d0 	.word	0x200003d0

08001764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC1_2_IRQHandler>
	...

08001768 <__libc_init_array>:
 8001768:	b570      	push	{r4, r5, r6, lr}
 800176a:	2500      	movs	r5, #0
 800176c:	4e0c      	ldr	r6, [pc, #48]	; (80017a0 <__libc_init_array+0x38>)
 800176e:	4c0d      	ldr	r4, [pc, #52]	; (80017a4 <__libc_init_array+0x3c>)
 8001770:	1ba4      	subs	r4, r4, r6
 8001772:	10a4      	asrs	r4, r4, #2
 8001774:	42a5      	cmp	r5, r4
 8001776:	d109      	bne.n	800178c <__libc_init_array+0x24>
 8001778:	f000 f82e 	bl	80017d8 <_init>
 800177c:	2500      	movs	r5, #0
 800177e:	4e0a      	ldr	r6, [pc, #40]	; (80017a8 <__libc_init_array+0x40>)
 8001780:	4c0a      	ldr	r4, [pc, #40]	; (80017ac <__libc_init_array+0x44>)
 8001782:	1ba4      	subs	r4, r4, r6
 8001784:	10a4      	asrs	r4, r4, #2
 8001786:	42a5      	cmp	r5, r4
 8001788:	d105      	bne.n	8001796 <__libc_init_array+0x2e>
 800178a:	bd70      	pop	{r4, r5, r6, pc}
 800178c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001790:	4798      	blx	r3
 8001792:	3501      	adds	r5, #1
 8001794:	e7ee      	b.n	8001774 <__libc_init_array+0xc>
 8001796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800179a:	4798      	blx	r3
 800179c:	3501      	adds	r5, #1
 800179e:	e7f2      	b.n	8001786 <__libc_init_array+0x1e>
 80017a0:	08001820 	.word	0x08001820
 80017a4:	08001820 	.word	0x08001820
 80017a8:	08001820 	.word	0x08001820
 80017ac:	08001824 	.word	0x08001824

080017b0 <memcpy>:
 80017b0:	b510      	push	{r4, lr}
 80017b2:	1e43      	subs	r3, r0, #1
 80017b4:	440a      	add	r2, r1
 80017b6:	4291      	cmp	r1, r2
 80017b8:	d100      	bne.n	80017bc <memcpy+0xc>
 80017ba:	bd10      	pop	{r4, pc}
 80017bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80017c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80017c4:	e7f7      	b.n	80017b6 <memcpy+0x6>

080017c6 <memset>:
 80017c6:	4603      	mov	r3, r0
 80017c8:	4402      	add	r2, r0
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d100      	bne.n	80017d0 <memset+0xa>
 80017ce:	4770      	bx	lr
 80017d0:	f803 1b01 	strb.w	r1, [r3], #1
 80017d4:	e7f9      	b.n	80017ca <memset+0x4>
	...

080017d8 <_init>:
 80017d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017da:	bf00      	nop
 80017dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017de:	bc08      	pop	{r3}
 80017e0:	469e      	mov	lr, r3
 80017e2:	4770      	bx	lr

080017e4 <_fini>:
 80017e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e6:	bf00      	nop
 80017e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ea:	bc08      	pop	{r3}
 80017ec:	469e      	mov	lr, r3
 80017ee:	4770      	bx	lr
